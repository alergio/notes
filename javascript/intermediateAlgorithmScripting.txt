------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


Intermediate Algorithm Scripting

    Now that you know the basics of algorithmic thinking, 
    along with OOP and Functional Programming, 
    test your skills with the Intermediate Algorithm Scripting challenges.

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


Sum All Numbers in a Range

    We'll pass you an array of two numbers. 
    Return the sum of those two numbers plus the sum of all the numbers between them. 
    The lowest number will not always come first.

    For example, sumAll([4,1]) should return 10 because sum of all the numbers between 1 and 4 (both inclusive) is 10.


        function sumAll(arr) {
            let max = Math.max(...arr);
            let min = Math.min(...arr);
            let sum = 0;

            for (let i = max; i >= min; i--) {
                sum += i;
            }
            
            return sum;
        }

            sumAll([1, 4]) should return 10.
            sumAll([4, 1]) should return 10.
            sumAll([5, 10]) should return 45.
            sumAll([10, 5]) should return 45.



Diff Two Arrays

    Compare two arrays and return a new array with any items only found in one of the two given arrays, but not both. In other words, return the symmetric difference of the two arrays.

    Note: You can return the array with its elements in any order.

        
        solution 1:

            function diffArray(arr1, arr2) {
                const newArr = [];

                let firstFirst = (first, second) => {
                    for (let i = 0; i < first.length; i++) {
                        if (second.indexOf(first[i]) === -1) {
                            newArr.push(first[i]);
                        }
                    }
                }
                firstFirst(arr1, arr2);
                firstFirst(arr2, arr1);

                return newArr;
            }

            diffArray([1, 2, 3, 5], [1, 2, 3, 4, 5])    //      [ 4 ]


        solution 2

            function diffArray(arr1, arr2) {
                return arr1
                    .concat(arr2)
                    .filter(item => !arr1.includes(item) || !arr2.includes(item));
            }

            diffArray([1, 2, 3, 5], [1, 2, 3, 4, 5]);










