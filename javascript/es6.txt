--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

ECMAScript, or ES, is a standardized version of JavaScript. Because all major browsers follow this specification, the terms ECMAScript and JavaScript are interchangeable.

Most of the JavaScript you've learned up to this point was in ES5 (ECMAScript 5), which was finalized in 2009. While you can still write programs in ES5, JavaScript is constantly evolving, and new features are released every year.

ES6, released in 2015, added many powerful new features to the language. In this course, you'll learn these new features, including arrow functions, destructuring, classes, promises, and modules.


--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Compare Scopes of the var and let Keywords

    resumen de lo entendido:
        las variables declaradas con var, siempre que son modificadas dentro de un bloque, statement o expression
        se modifica el valor de la  variable de manera global.

        las variables declaradas con let, pueden ser modifiadas dentro de un bloque, statement o expression
        y el valor nuevo de esa variable solo existira dentro de estos limites, no cambiara el valor global de la variable

    When you declare a variable with the var keyword, it is declared globally, or locally if declared inside a function.
    The let keyword behaves similarly, but with some extra features. 
    When you declare a variable with the let keyword inside a block, statement, or expression, 
    its scope is limited to that block, statement, or expression.

    for example

        var numArray = [];
        for (var i = 0; i < 3; i++) {
            numArray.push(i);
        }
        console.log(numArray);
        console.log(i);

            Here the console will display the values 
                    [0, 1, 2] 
                and 
                    3.

        With the var keyword, i is declared globally. 
        So when i++ is executed, it updates the global variable. 
        This code is similar to the following:

        var numArray = [];
        var i;
        for (i = 0; i < 3; i++) {
            numArray.push(i);
        }
        console.log(numArray);
        console.log(i);

            Here the console will display the values 
                    [0, 1, 2] 
                and 
                    3.

    This behavior will cause problems if you were to create a function 
    and store it for later use inside a for loop that uses the i variable. 
    This is because the stored function will always refer to the value of the updated global i variable.

            var printNumTwo;
            for (var i = 0; i < 3; i++) {
                if (i === 2) {
                    printNumTwo = function() {
                    return i;
                    };
                }
            }
            console.log(printNumTwo());

        console will display 3.

        As you can see, printNumTwo() prints 3 and not 2. 
        This is because the value assigned to i was updated 
        and the printNumTwo() returns the global i 
        and not the value i had when the function was created in the for loop. 
        
        The let keyword does not follow this behavior:

                let printNumTwo;
                for (let i = 0; i < 3; i++) {
                    if (i === 2) {
                        printNumTwo = function() {
                            return i;
                        };
                    }
                }
                console.log(printNumTwo());
                console.log(i);       

            console will display 2.
            and an error that "i is not defined".

        i is not defined because it was not declared in the global scope. 
        It is only declared within the for loop statement. 
        printNumTwo() returned the correct value because 
        three different i variables with unique values (0, 1, and 2) 
        were created by the let keyword within the loop statement.


    EXERCISE

            function checkScope() {
                var i = 'function scope';
                if (true) {
                    i = 'block scope';
                    console.log('Block scope i is: ', i);
                }
                console.log('Function scope i is: ', i);
                return i;
            }

            console.log(checkScope())


        Fix the code so that i declared in the if statement 
        is a separate variable than i declared in the first line of the function. 
        Be certain not to use the var keyword anywhere in your code.

        This exercise is designed to illustrate the difference 
        between how var and let keywords assign scope to the declared variable. 
        When programming a function similar to the one used in this exercise, 
        it is often better to use different variable names to avoid confusion.


            function checkScope() {
                let i = 'function scope';
                if (true) {
                    let i = 'block scope';
                    console.log('Block scope i is: ', i);
                }
                console.log('Function scope i is: ', i);
                return i;
            }

                console.log(checkScope())

            console will display
                Block scope i is:  block scope
                Function scope i is:  function scope
                function scope
            
        creo una nueva variable i solo de forma local dentro del if statement.
        el valor de i global se mantiene intacto



Mutate an Array Declared with const
