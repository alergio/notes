--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

ECMAScript, or ES, is a standardized version of JavaScript. Because all major browsers follow this specification, the terms ECMAScript and JavaScript are interchangeable.

Most of the JavaScript you've learned up to this point was in ES5 (ECMAScript 5), which was finalized in 2009. While you can still write programs in ES5, JavaScript is constantly evolving, and new features are released every year.

ES6, released in 2015, added many powerful new features to the language. In this course, you'll learn these new features, including arrow functions, destructuring, classes, promises, and modules.


--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Compare Scopes of the var and let Keywords

    resumen de lo entendido:
        las variables declaradas con var, siempre que son modificadas dentro de un bloque, statement o expression
        se modifica el valor de la  variable de manera global.

        las variables declaradas con let, pueden ser modifiadas dentro de un bloque, statement o expression
        y el valor nuevo de esa variable solo existira dentro de estos limites, no cambiara el valor global de la variable

    When you declare a variable with the var keyword, it is declared globally, or locally if declared inside a function.
    The let keyword behaves similarly, but with some extra features. 
    When you declare a variable with the let keyword inside a block, statement, or expression, 
    its scope is limited to that block, statement, or expression.

    for example

        var numArray = [];
        for (var i = 0; i < 3; i++) {
            numArray.push(i);
        }
        console.log(numArray);
        console.log(i);

            Here the console will display the values 
                    [0, 1, 2] 
                and 
                    3.

        With the var keyword, i is declared globally. 
        So when i++ is executed, it updates the global variable. 
        This code is similar to the following:

        var numArray = [];
        var i;
        for (i = 0; i < 3; i++) {
            numArray.push(i);
        }
        console.log(numArray);
        console.log(i);

            Here the console will display the values 
                    [0, 1, 2] 
                and 
                    3.

    This behavior will cause problems if you were to create a function 
    and store it for later use inside a for loop that uses the i variable. 
    This is because the stored function will always refer to the value of the updated global i variable.

            var printNumTwo;
            for (var i = 0; i < 3; i++) {
                if (i === 2) {
                    printNumTwo = function() {
                    return i;
                    };
                }
            }
            console.log(printNumTwo());

        console will display 3.

        As you can see, printNumTwo() prints 3 and not 2. 
        This is because the value assigned to i was updated 
        and the printNumTwo() returns the global i 
        and not the value i had when the function was created in the for loop. 
        
        The let keyword does not follow this behavior:

                let printNumTwo;
                for (let i = 0; i < 3; i++) {
                    if (i === 2) {
                        printNumTwo = function() {
                            return i;
                        };
                    }
                }
                console.log(printNumTwo());
                console.log(i);       

            console will display 2.
            and an error that "i is not defined".

        i is not defined because it was not declared in the global scope. 
        It is only declared within the for loop statement. 
        printNumTwo() returned the correct value because 
        three different i variables with unique values (0, 1, and 2) 
        were created by the let keyword within the loop statement.


    EXERCISE

            function checkScope() {
                var i = 'function scope';
                if (true) {
                    i = 'block scope';
                    console.log('Block scope i is: ', i);
                }
                console.log('Function scope i is: ', i);
                return i;
            }

            console.log(checkScope())


        Fix the code so that i declared in the if statement 
        is a separate variable than i declared in the first line of the function. 
        Be certain not to use the var keyword anywhere in your code.

        This exercise is designed to illustrate the difference 
        between how var and let keywords assign scope to the declared variable. 
        When programming a function similar to the one used in this exercise, 
        it is often better to use different variable names to avoid confusion.


            function checkScope() {
                let i = 'function scope';
                if (true) {
                    let i = 'block scope';
                    console.log('Block scope i is: ', i);
                }
                console.log('Function scope i is: ', i);
                return i;
            }

                console.log(checkScope())

            console will display
                Block scope i is:  block scope
                Function scope i is:  function scope
                function scope
            
        creo una nueva variable i solo de forma local dentro del if statement.
        el valor de i global se mantiene intacto



Mutate an Array Declared with const
    The const declaration has many use cases in modern JavaScript.

    Some developers prefer to assign all their variables using const by default, 
    unless they know they will need to reassign the value. Only in that case, they use let.

    However, it is important to understand that objects (including arrays and functions) 
    assigned to a variable using const are still mutable. 
    Using the const declaration only prevents reassignment of the variable identifier.

            const s = [5, 6, 7];
            s = [1, 2, 3];
            s[2] = 45;
            console.log(s);

                s = [1, 2, 3] will result in an error. 
                The console.log will display the value [5, 6, 45].

    As you can see, you can mutate the object [5, 6, 7] itself 
    and the variable s will still point to the altered array [5, 6, 45]. 
    Like all arrays, the array elements in s are mutable, 
    but because const was used, you cannot use the variable identifier s 
    to point to a different array using the assignment operator.



Prevent Object Mutation
    const declaration alone doesn't really protect your data from mutation. 
    To ensure your data doesn't change, JavaScript provides a function Object.freeze to prevent data mutation.
    Any attempt at changing the object will be rejected, 
    with an error thrown if the script is running in strict mode.

                let obj = {
                    name:"FreeCodeCamp",
                    review:"Awesome"
                };
                Object.freeze(obj);
                obj.review = "bad";
                obj.newProp = "Test";
                console.log(obj);

        The obj.review and obj.newProp assignments will result in errors, 
        because our editor runs in strict mode by default, and the console will display the value 
        { name: "FreeCodeCamp", review: "Awesome" }.



Use Arrow Functions to Write Concise Anonymous Functions
    In JavaScript, we often don't need to name our functions, 
    especially when passing a function as an argument to another function. 
    Instead, we create inline functions. We don't need to name these functions 
    because we do not reuse them anywhere else.

    syntax:

        const myFunc = function() {
            const myVar = "value";
            return myVar;
        }

    ES6 provides us with the syntactic sugar 
    to not have to write anonymous functions this way. 
    Instead, you can use arrow function syntax:

        const myFunc = () => {
            const myVar = "value";
            return myVar;
        }

    When there is no function body, 
    and only a return value, 
    arrow function syntax allows you to omit the keyword return 
    as well as the brackets surrounding the code. 
    This helps simplify smaller functions into one-line statements:

        const myFunc = () => "value";

    This code will still return the string value by default.



Write Arrow Functions with Parameters
    Just like a regular function, you can pass arguments into an arrow function.

        const doubler = (item) => item * 2;
        doubler(4);

            doubler(4) would return the value 8.

    If an arrow function has a single parameter, the parentheses enclosing the parameter may be omitted.

        const doubler = item => item * 2;

    It is possible to pass more than one argument into an arrow function.

        const multiplier = (item, multi) => item * multi;
        multiplier(4, 2);   
    
            multiplier(4, 2) would return the value 8.



Set Default Parameters for Your Functions
    In order to help us create more flexible functions, ES6 introduces default parameters for functions.

        const greeting = (name = "Anonymous") => "Hello " + name;

        console.log(greeting("John"));
        console.log(greeting());

    The console will display the strings Hello John and Hello Anonymous.

    The default parameter kicks in when the argument is not specified (it is undefined). 
    As you can see in the example above, the parameter name will receive its default 
    value Anonymous when you do not provide a value for the parameter. 
    You can add default values for as many parameters as you want.


Map(), Filter(), Reduce()

    The map() method is used for creating a new array from an existing one, 
    applying a function to each one of the elements of the first array.
    se le aplica la funcion asignada a cada uno de los elementos dentro del array.

            const numbers = [1, 2, 3, 4];
            const doubled = numbers.map(item => item * 2);
            console.log(doubled); // [2, 4, 6, 8]


    The filter() method takes each element in an array and it applies a conditional statement against it. 
    If this conditional returns true, the element gets pushed to the output array. 
    If the condition returns false, the element does not get pushed to the output array.
    se le aplica una condicion a cada elemento dentro del array, si da true el elemento se guarda en el nuevo array y si no no

            const numbers = [1, 2, 3, 4];
            const evens = numbers.filter(item => item % 2 === 0);
            console.log(evens); // [2, 4]

            
            const students = [
                { name: 'Quincy', grade: 96 },
                { name: 'Jason', grade: 84 },
                { name: 'Alexis', grade: 100 },
                { name: 'Sam', grade: 65 },
                { name: 'Katie', grade: 90 }
            ];
            
            const studentGrades = students.filter(student => student.grade >= 90);
            return studentGrades; // [ { name: 'Quincy', grade: 96 }, { name: 'Alexis', grade: 100 }, { name: 'Katie', grade: 90 } ]

    
    The reduce() method reduces an array of values down to just one value.
    To get the output value, it runs a reducer function on each element of the array.
    para usar el reduce se tiene que llamar a una funcion con por lo menos dos parametros
    que sera utilizada para cada item del array
    accumulator - the returned value of the previous iteration
    currentValue - the current item in the array

    The initialValue argument is optional. If provided, 
    it will be used as the initial accumulator value in the first call to the callback function.

            arr.reduce(callback[, initialValue])


                const numbers = [1, 2, 3, 4];
                const sum = numbers.reduce(function (result, item) {
                return result + item;
                }, 0);
                console.log(sum); // 10

                    0+1   = 1
                    1 + 2 = 3
                    3 + 3 = 6
                    6 + 4 = 10

        In the next example, reduce() is used to transform an array of strings into a single object 
        that shows how many times each string appears in the array. 
        Notice this call to reduce passes an empty object {} as the initialValue parameter. 
        This will be used as the initial value of the accumulator (the first argument) passed to the callback function.


                    var pets = ['dog', 'chicken', 'cat', 'dog', 'chicken', 'chicken', 'rabbit'];

                    var petCounts = pets.reduce(function(obj, pet){
                        if (!obj[pet]) {
                            obj[pet] = 1;
                        } else {
                            obj[pet]++;
                        }
                        return obj;
                    }, {});

                    console.log(petCounts); 

                    /*
                    Output:
                    { 
                        dog: 2, 
                        chicken: 3, 
                        cat: 1, 
                        rabbit: 1 
                    }
                    */



Use the Rest Parameter with Function Parameters
    rest parameter for function parameters. With the rest parameter, 
    you can create functions that take a variable number of arguments. 
    These arguments are stored in an array that can be accessed later from inside the function.

            function howMany(...args) {
                return "You have passed " + args.length + " arguments.";
            }
            console.log(howMany(0, 1, 2)); // You have passed 3 arguments. 
            console.log(howMany("string", null, [1, 2, 3], { }));   // You have passed 4 arguments..

    The rest parameter eliminates the need to check the args array and 
    allows us to apply map(), filter() and reduce() on the parameters array.

    funcion que devuelve la suma de todos los parametros que le pasemos...

        const sum = (...args) => {
           return args.reduce((a, b) => a + b, 0);
        }

        when using ...args to take all the arguments the func receives
        automatically creates an array containing each of the arguments received by the func
        in this case "args" will be the array
        now i can map, filter or reduce this



Use the Spread Operator to Evaluate Arrays In-Place
    spread operator, which allows us to expand arrays and other 
    expressions in places where multiple parameters or elements are expected.

    The ES5 code below uses apply() to compute the maximum value in an array:

            var arr = [6, 89, 3, 45];
            var maximus = Math.max.apply(null, arr);
            maximus would have a value of 89.

    We had to use Math.max.apply(null, arr) because Math.max(arr) returns NaN. 
    Math.max() expects comma-separated arguments, but not an array. 
    The spread operator makes this syntax much better to read and maintain.

            const arr = [6, 89, 3, 45];
            const maximus = Math.max(...arr);
            maximus would have a value of 89.

    ...arr returns an unpacked array. In other words, it spreads the array.

    However, the spread operator only works in-place, like in an argument to a function or in an array literal. 
    The following code will not work:

        const spreaded = ...arr;


    example

        const arr1 = ['JAN', 'FEB', 'MAR', 'APR', 'MAY'];
        let arr2;

        arr2 = [...arr1];  // como el spread operator desglosa el array, para que arr 2 sea igual a arr1 hay que poner el  
                                spread operator dentro de un array [] si no no funciona

        console.log(arr2);  // = arr1



Use Destructuring Assignment to Extract Values from Objects
    Destructuring assignment is special syntax introduced in ES6, for neatly assigning values taken directly from an object.

    Consider the following ES5 code:
        
            const user = { name: 'John Doe', age: 34 };

            const name = user.name;
            const age = user.age;

        name would have a value of the string John Doe, and age would have the number 34.

    Here's an equivalent assignment statement using the ES6 destructuring syntax:

            const { name, age } = user;

        Again, name would have a value of the string John Doe, and age would have the number 34.
        Here, the name and age variables will be created and assigned the values of their respective values from the user object. 
        You can see how much cleaner this is.
        You can extract as many or few values from the object as you want.



Use Destructuring Assignment to Assign Variables from Objects
     assign a new variable name when extracting values. 
     You can do this by putting the new name after a colon when assigning the value.

    object:
            const user = { name: 'John Doe', age: 34 };

    Here's how you can give new variable names in the assignment:

        const { name: userName, age: userAge } = user;

    get the value of user.name and assign it to a new variable named userName

    The value of userName would be the string John Doe, and the value of userAge would be the number 34.



Use Destructuring Assignment to Assign Variables from Nested Objects
     same principles

            const user = {
                johnDoe: { 
                    age: 34,
                    email: 'johnDoe@freeCodeCamp.com'
                }
            };

    extract the values of object properties and assign them to variables with the same name:

        const { johnDoe: { age, email }} = user;

    And here's how you can assign an object properties' values to variables with different names:

        const { johnDoe: { age: userAge, email: userEmail }} = user;



Use Destructuring Assignment to Assign Variables from Arrays
    ES6 makes destructuring arrays as easy as destructuring objects.

    One key difference between the spread operator and array destructuring 
    is that the spread operator unpacks all contents of an array into a comma-separated list. 
    Consequently, you cannot pick or choose which elements you want to assign to variables.

    Destructuring an array lets us do exactly that:

        const [a, b] = [1, 2, 3, 4, 5, 6];
        console.log(a, b);
                            // a and b as 1, 2.

    The variable a is assigned the first value of the array, 
    and b is assigned the second value of the array. 
    We can also access the value at any index in an array 
    with destructuring by using commas to reach the desired index:

            const [a, b,,, c] = [1, 2, 3, 4, 5, 6];
            console.log(a, b, c);
                                    // a, b, and c as 1, 2, 5.


        con esta desestructuracion podemos alterar un valor de una variable por el valor de otra y esta por el de la anterior...

            let a = 8, b = 6;
            [a, b] = [b, a]

        // a vale 6 y b vale 8

        [a, b] = [b, a] // es igual a [8, 6] = [6, 8]
        con la desestructuracion lo que hacemos es acceder a los valores de un array y al haber definido a y b
        lo q hacemos ahi es a a = b y b = a ...



Use Destructuring Assignment with the Rest Parameter to Reassign Array Elements
    In some situations involving array destructuring, 
    we might want to collect the rest of the elements into a separate array.

    The result is similar to Array.prototype.slice(), as shown below:

            const [a, b, ...arr] = [1, 2, 3, 4, 5, 7];
            console.log(a, b);
            console.log(arr);
    
    The console would display the values 1, 2 and [3, 4, 5, 7].

    Variables a and b take the first and second values from the array. 
    After that, because of the rest parameter's presence, arr gets the rest of the values in the form of an array. 
    The rest element only works correctly as the last variable in the list. 
    As in, you cannot use the rest parameter to catch a subarray that leaves out the last element of the original array.

                        const source = [1,2,3,4,5,6,7,8,9,10];
                        function removeFirstTwo(list) {
                            const [a, b, ...arr] = list;
                        return arr;
                        }
                        const arr = removeFirstTwo(source);


        El método slice() devuelve una copia de una parte del array 
        dentro de un nuevo array empezando por inicio hasta fin (fin no incluido). 

        syntax
                arr.slice([inicio [, fin]])

        inicio
            Índice donde empieza la extracción. El primer elemento corresponde con el índice 0.
            Si el índice especificado es negativo, indica un desplazamiento desde el final del array. 
            slice(-2)extrae los dos últimos elementos del array
            Si inicio es omitido el valor por defecto es 0.
            Si inicio es mayor a la longitud del array, se devuelve un array vacío.

        fin
            Índice que marca el final de la extracción. slice extrae hasta, pero sin incluir el final.
            slice(1,4) extrae desde el segundo elemento hasta el cuarto (los elementos con índices 1, 2, y 3).
            Con un índice negativo, fin indica un desplazamiento desde el final de la secuencia. 
            slice(2,-1) extrae desde el tercer hasta el penúltimo elemento en la secuencia.
            Si fin es omitido, slice extrae hasta el final de la secuencia (arr.length).
            Si fin es mayor a la longitud del array, slice extrae hasta el final de la secuencia (arr.length).

        retorna Un nuevo array con los valores extraídos.


            var nombres = ['Rita', 'Pedro', 'Miguel', 'Ana', 'Vanesa'];
            var masculinos = nombres.slice(1, 3);

                // masculinos contiene ['Pedro','Miguel']



Use Destructuring Assignment to Pass an Object as a Function's Parameters

    In some cases, you can destructure the object in a function argument itself.

        const profileUpdate = (profileData) => {
            const { name, age, nationality, location } = profileData;
        }

    This effectively destructures the object sent into the function. This can also be done in-place:

        const profileUpdate = ({ name, age, nationality, location }) => {

        }

    When profileData is passed to the above function, the values are 
    destructured from the function parameter for use within the function.


        another example

            const stats = {
                max: 56.78,
                standard_deviation: 4.34,
                median: 34.54,
                mode: 23.87,
                min: -0.75,
                average: 35.85
            };

            const half = ({ max, min }) => (max + min) / 2;
            console.log(half(stats));



Create Strings using Template Literals

    template literal. This is a special type of string that makes creating complex strings easier.

                const person = {
                    name: "Zodiac Hasbro",
                    age: 56
                };

                const greeting = `Hello, my name is ${person.name}!
                I am ${person.age} years old.`;

                console.log(greeting);

                    // Hello, my name is Zodiac Hasbro! and 
                    // I am 56 years old..

    the example uses backticks (`), not quotes (' or "), to wrap the string. 
    the string is multi-line, both in the code and the output. 
    The ${variable} syntax used above is a placeholder.
    you won't have to use concatenation with the + operator anymore.
    To add variables to strings, you just drop the variable in a template string and wrap it with ${ and }.
    Similarly, you can include other expressions in your string literal, 
    for example ${a + b}. This new way of creating strings gives you more flexibility to create robust strings.


        example for this
        
        const result = {
            success: ["max-length", "no-amd", "prefer-arrow-functions"],
            failure: ["no-var", "var-on-top", "linebreak"],
            skipped: ["no-extra-semi", "no-dup-keys"]
        };

        function makeList(arr) {
            // Only change code below this line

            const failureItems = [];
            for (let i = 0; i < arr.length; i++) {
                failureItems.push(`<li class="text-warning">${arr[i]}</li>`)
            }

            // Only change code above this line

            return failureItems;
        }

        const failuresList = makeList(result.failure);
        console.log(failuresList)



Write Concise Object Literal Declarations Using Object Property Shorthand

    ES6 adds some nice support for easily defining object literals.
    Consider the following code:

            const getMousePosition = (x, y) => ({
                x: x,
                y: y
            });

    getMousePosition is a simple function that returns an object containing two properties. 
    ES6 provides the syntactic sugar to eliminate the redundancy of having to write x: x. 
    You can simply write x once, and it will be converted tox: x (or something equivalent) under the hood. 
    
    Here is the same function from above rewritten to use this new syntax:

        const getMousePosition = (x, y) => ({ x, y });

        esta funcion va a retornar los valores que pasemos como parametros como valores de las propiedades x e y de un objeto.

            getMousePosition("a", "b");     //  { x: 'a', y: 'b' }


    another example

        const createPerson = (name, age, gender) => {
            // Only change code below this line
            return { name, age, gender };
            //   Only change code above this line
        };

            createPerson("Zodiac Hasbro", 56, "male")   //   {name: "Zodiac Hasbro", age: 56, gender: "male"}.



Write Concise Declarative Functions with ES6

    When defining functions within objects in ES5, we have to use the keyword function as follows:

        const person = {
            name: "Taylor",
            sayHello: function() {
                return `Hello! My name is ${this.name}.`;
            }
        };

    With ES6, you can remove the function keyword and colon altogether 
    when defining functions in objects. 
    Here's an example of this syntax:

        const person = {
            name: "Taylor",
            sayHello() {
                return `Hello! My name is ${this.name}.`;
            }
        };

        another example

        // Only change code below this line
        const bicycle = {
            gear: 2,
            setGear(newGear) {
                this.gear = newGear;
            }
        };
        // Only change code above this line
        bicycle.setGear(3);
        console.log(bicycle.gear);



Use class Syntax to Define a Constructor Function

    ES6 provides a new syntax to create objects, using the class keyword.

    In ES5, we usually define a constructor function and use the new keyword to instantiate an object.

        var SpaceShuttle = function(targetPlanet){
            this.targetPlanet = targetPlanet;
        }
        var zeus = new SpaceShuttle('Jupiter');

    The class syntax simply replaces the constructor function creation:

        class SpaceShuttle {
            constructor(targetPlanet) {
                this.targetPlanet = targetPlanet;
            }
        }
        const zeus = new SpaceShuttle('Jupiter');

    It should be noted that the class keyword declares a new function, 
    to which a constructor is added. 
    This constructor is invoked when new is called to create a new object.

    Note: UpperCamelCase should be used by convention for ES6 class names, as in SpaceShuttle used above.

    The constructor method is a special method for creating and initializing an object created with a class. 
    You will learn more about it in the Object Oriented Programming section of the JavaScript Algorithms And Data Structures Certification.


                // Only change code below this line
                class Vegetable {
                    constructor(name) {
                        this.name = name;
                    }
                }
                // Only change code above this line

                const carrot = new Vegetable('carrot');
                console.log(carrot.name); // Should display 'carrot'
                console.log(carrot); // { name: 'carrot' }



Use getters and setters to Control Access to an Object

    You can obtain values from an object and set the value of a property within an object.
    These are classically called getters and setters.

    Getter functions are meant to simply return (get) 
    the value of an object's private variable to the user 
    without the user directly accessing the private variable.

    Setter functions are meant to modify (set) 
    the value of an object's private variable based on the value passed into the setter function. 
    This change could involve calculations, or even overwriting the previous value completely.

                class Book {
                    constructor(author) {
                        this._author = author;
                    }
                    // getter
                    get writer() {
                        return this._author;
                    }
                    // setter
                    set writer(updatedAuthor) {
                        this._author = updatedAuthor;
                    }
                }
                const novel = new Book('anonymous');
                console.log(novel.writer);      // >> "anonymous"
                novel.writer = 'newAuthor';
                console.log(novel.writer);      // >> "newAuthor"

    Notice the syntax used to invoke the getter and setter. 
    They do not even look like functions. 
    Getters and setters are important because they hide internal implementation details.

    Note: It is convention to precede the name of a private variable with an underscore (_). 
    However, the practice itself does not make a variable private.


        LO QUE VIENE DE ACA PARA ABAJO ES UN EJERCICIO QUE TRABAJA COMO SI FUERA UNA API (?)
        carga valores de una manera y permite acceder a esos valores de otra manera


        Use the class keyword to create a Thermostat class. 
        The constructor accepts a Fahrenheit temperature.
        In the class, create a getter to obtain the temperature in Celsius 
        and a setter to set the temperature in Celsius.

        Remember that - C = 5/9 * (F - 32) - and - F = C * 9.0 / 5 + 32 - 
        where F is the value of temperature in Fahrenheit, 
        and C is the value of the same temperature in Celsius.

        Note: When you implement this, 
        you will track the temperature inside the class in one scale, either Fahrenheit or Celsius.

        This is the power of a getter and a setter. 
        You are creating an API for another user, 
        who can get the correct result regardless of which one you track.

        In other words, you are abstracting implementation details from the user.

                        // Only change code below this line
                        class Thermostat {
                            constructor(fahrenheit) {
                                this._fahrenheit = fahrenheit;
                            }
                            get temperature() {
                                return 5/9 * (this._fahrenheit - 32);
                            }
                            set temperature(updatedFahrenheit) {
                                this._fahrenheit = updatedFahrenheit * 9.0 / 5 + 32;
                            }
                        }
                        // Only change code above this line

                        const thermos = new Thermostat(76);     // Setting in Fahrenheit scale
                        let temp = thermos.temperature;         // 24.44 in Celsius
                        thermos.temperature = 26;
                        temp = thermos.temperature;             // 26 in Celsius

                        console.log(thermos.temperature);       // 26
                        console.log(thermos._fahrenheit);       // 78.8

                            // de esta manera podemos acceder en la misma variable al mismo dato en distinto formato



Create a Module Script

    JavaScript started with a small role to play on an otherwise mostly HTML web. 
    Today, it’s huge, and some websites are built almost entirely with JavaScript. 
    In order to make JavaScript more modular, clean, and maintainable; 
    ES6 introduced a way to easily share code among JavaScript files. 
    This involves exporting parts of a file for use in one or more other files, 
    and importing the parts you need, where you need them. 
    In order to take advantage of this functionality, you need to create a script 
    in your HTML document with a type of module. Here’s an example:

            <script type="module" src="filename.js"></script>

    A script that uses this module type can now use the 
    import and export features you will learn about in the upcoming challenges.



Use export to Share a Code Block

    Imagine a file called math_functions.js that contains several functions related to mathematical operations. 
    One of them is stored in a variable, add, that takes in two numbers and returns their sum. 
    You want to use this function in several different JavaScript files. 
    In order to share it with these other files, you first need to export it.

            export const add = (x, y) => {
                return x + y;
            }

    The above is a common way to export a single function, but you can achieve the same thing like this:

            const add = (x, y) => {
                return x + y;
            }

            export { add };

    When you export a variable or function, you can import it in another file and use it without having to rewrite the code. 
    You can export multiple things by repeating the first example for each thing you want to export, 
    or by placing them all in the export statement of the second example, like this:

            export { add, subtract };



Reuse JavaScript Code Using import

    import allows you to choose which parts of a file or module to load. 
    In the previous lesson, the examples exported add from the math_functions.js file. 
    Here's how you can import it to use in another file:

            import { add } from './math_functions.js';

    Here, import will find add in math_functions.js, import just that function for you to use, and ignore the rest. 
    The ./ tells the import to look for the math_functions.js file in the same folder as the current file. 
    The relative file path (./) and file extension (.js) are required when using import in this way.

    You can import more than one item from the file by adding them in the import statement like this:

            import { add, subtract } from './math_functions.js';



Use * to Import Everything from a File

    Suppose you have a file and you wish to import all of its contents into the current file. 
    This can be done with the import * as syntax. 
    Here's an example where the contents of a file named math_functions.js are imported into a file in the same directory:

            import * as myMathModule from "./math_functions.js";

    The above import statement will create an object called myMathModule. 
    This is just a variable name, you can name it anything. 
    The object will contain all of the exports from math_functions.js in it, 
    so you can access the functions like you would any other object property. 
    
    Here's how you can use the add and subtract functions that were imported:

            myMathModule.add(2,3);
            myMathModule.subtract(5,3);



Create an Export Fallback with export default

    In the export lesson, you learned about the syntax referred to as a named export. 
    This allowed you to make multiple functions and variables available for use in other files.

    There is another export syntax you need to know, known as export default. 
    Usually you will use this syntax if only one value is being exported from a file. 
    It is also used to create a fallback value for a file or module.

    Below are examples using export default:

        export default function add(x, y) {
            return x + y;
        }

        export default function(x, y) {
            return x + y;
        }

    The first is a named function, and the second is an anonymous function.

    Since export default is used to declare a fallback value for a module or file, 
    you can only have one value be a default export in each module or file. 
    Additionally, you cannot use export default with var, let, or const



Import a Default Export
    
    In the last challenge, you learned about export default and its uses. 
    To import a default export, you need to use a different import syntax. 
    In the following example, add is the default export of the math_functions.js file. 
    
    Here is how to import it:

        import add from "./math_functions.js";
    
    The syntax differs in one key place. 
    The imported value, add, is not surrounded by curly braces ({}). 
    add here is simply a variable name for whatever the default export of the math_functions.js file is. 
    You can use any name here when importing a default.



Create a JavaScript Promise

    A promise in JavaScript is exactly what it sounds like - you use it to make a promise to do something, usually asynchronously. 
    When the task completes, you either fulfill your promise or fail to do so. 
    Promise is a constructor function, so you need to use the  new  keyword to create one. 
    It takes a function, as its argument, with two parameters - resolve and reject. 
    These are methods used to determine the outcome of the promise. 
    
    The syntax looks like this:

            const myPromise = new Promise((resolve, reject) => {

            });



Complete a Promise with resolve and reject

    A promise has three states: pending, fulfilled, and rejected. 
    The promise you created in the last challenge is forever stuck in the pending state 
    because you did not add a way to complete the promise. 
    The resolve and reject parameters given to the promise argument are used to do this. 
    resolve is used when you want your promise to succeed, 
    and reject is used when you want it to fail. 
    
    These are methods that take an argument, as seen below.

            const myPromise = new Promise((resolve, reject) => {
                if(condition here) {
                    resolve("Promise was fulfilled");
                } else {
                    reject("Promise was rejected");
                }
            });

    The example above uses strings for the argument of these functions, 
    but it can really be anything. Often, it might be an object, 
    that you would use data from, to put on your website or elsewhere.

            const makeServerRequest = new Promise((resolve, reject) => {
                // responseFromServer represents a response from a server
                let responseFromServer;
                    
                if(responseFromServer) {
                    resolve("We got the data");
                } else {  
                    reject("Data not received");
                }
            });



Handle a Fulfilled Promise with then

    Promises are most useful when you have a process that takes an unknown amount of time in your code 
    (i.e. something asynchronous), often a server request. 
    When you make a server request it takes some amount of time, 
    and after it completes you usually want to do something with the response from the server. 
    This can be achieved by using the then method. 
    The then method is executed immediately after your promise is fulfilled with resolve. 
    Here’s an example:

            myPromise.then(result => {
  
            });

    result comes from the argument given to the resolve method.

            const makeServerRequest = new Promise((resolve, reject) => {
                // responseFromServer is set to true to represent a successful response from a server
                let responseFromServer = true;
                    
                if(responseFromServer) {
                    resolve("We got the data");
                } else {  
                    reject("Data not received");
                }
            });

            makeServerRequest.then(result => {
                console.log(result);
            });

            // >> We got the data



Handle a Rejected Promise with catch
    catch is the method used when your promise has been rejected. 
    It is executed immediately after a promise's reject method is called. 
    Here’s the syntax:

        myPromise.catch(error => {
        
        });
    
    error is the argument passed in to the reject method.


            const makeServerRequest = new Promise((resolve, reject) => {
                // responseFromServer is set to false to represent an unsuccessful response from a server
                let responseFromServer = false;
                    
                if(responseFromServer) {
                    resolve("We got the data");
                } else {  
                    reject("Data not received");
                }
            });

            makeServerRequest.catch(error => {
                console.log(error);
            });

                // >> Data not received



syntax para else if with ? and :

    condition1 ? value1 : condition2 ? value2 : value3

        si se cumple condicion 1, retorna value1
        si se cumple condicion 2, retorna value2
        si no se cumple ninguna, retorna value3

    mas ejmplos

        condición ? expr1 : expr2 

        "La Cuota es de:  " + (isMember ? "$2.00" : "$10.00")

        var elvisLives = Math.PI > 4 ? "Sip" : "Nop";


        var firstCheck = false,
            secondCheck = false,
            access = firstCheck ? "Acceso Denegado" : secondCheck ? "Acceso Denegado" : "Acceso Permitido";

        console.log( access ); // muestra "Acceso Permitido"


        También puede usar operaciones ternarias en espacio vacío con el propósito de realizar diferentes operaciones:

            var stop = false, age = 16;

            age > 18 ? location.assign("continue.html") : stop = true;
            

        También puede realizar más de una operación por caso, separándolas con una coma:

            var stop = false, age = 23;

            age > 18 ? (
                alert("OK, puedes continuar."),
                location.assign("continue.html")
            ) : (
                stop = true,
                alert("Disculpa, eres menor de edad!")
            );
