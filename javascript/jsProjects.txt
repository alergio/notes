

JavaScript Algorithms and Data Structures Projects


--------------------------------------------------------------------------------------


Palindrome Checker

    Return true if the given string is a palindrome. Otherwise, return false.

    A palindrome is a word or sentence that's spelled the same way both forward and backward, 
    ignoring punctuation, case, and spacing.

    Note: You'll need to remove all non-alphanumeric characters (punctuation, spaces and symbols) 
    and turn everything into the same case (lower or upper case) in order to check for palindromes.
    We'll pass strings with varying formats, such as racecar, RaceCar, and race CAR among others.
    We'll also pass strings with special symbols, such as 2A3*3a2, 2A3 3a2, and 2_A3*3#A2.

    palindrome("eye") should return a boolean.
    palindrome("eye") should return true.
    palindrome("_eye") should return true.
    palindrome("race car") should return true.
    palindrome("not a palindrome") should return false.
    palindrome("A man, a plan, a canal. Panama") should return true.
    palindrome("never odd or even") should return true.
    palindrome("nope") should return false.
    palindrome("almostomla") should return false.
    palindrome("My age is 0, 0 si ega ym.") should return true.
    palindrome("1 eye for of 1 eye.") should return false.
    palindrome("0_0 (: /-\ :) 0-0") should return true.
    palindrome("five|\_/|four") should return false.

        my solution: 

            function palindrome(str) {

                str = str.replace(/(\W)|(_)/g, '').toLowerCase();

                return str === str.split('').reverse().join('');
            }






Roman Numeral Converter

    Convert the given number into a roman numeral.

    Roman numerals	Arabic numerals
         M	         1000
         CM	         900
         D	         500
         CD	         400
         C	         100
         XC	         90
         L	         50
         XL	         40
         X	         10
         IX	         9
         V	         5
         IV	         4
         I	         1

    All roman numerals answers should be provided in upper-case.

    convertToRoman(2) should return the string II.
    convertToRoman(3) should return the string III.
    convertToRoman(4) should return the string IV.
    convertToRoman(5) should return the string V.
    convertToRoman(9) should return the string IX.
    convertToRoman(12) should return the string XII.
    convertToRoman(16) should return the string XVI.
    convertToRoman(29) should return the string XXIX.
    convertToRoman(44) should return the string XLIV.
    convertToRoman(45) should return the string XLV.
    convertToRoman(68) should return the string LXVIII
    convertToRoman(83) should return the string LXXXIII
    convertToRoman(97) should return the string XCVII
    convertToRoman(99) should return the string XCIX
    convertToRoman(400) should return the string CD
    convertToRoman(500) should return the string D
    convertToRoman(501) should return the string DI
    convertToRoman(649) should return the string DCXLIX
    convertToRoman(798) should return the string DCCXCVIII
    convertToRoman(891) should return the string DCCCXCI
    convertToRoman(1000) should return the string M
    convertToRoman(1004) should return the string MIV
    convertToRoman(1006) should return the string MVI
    convertToRoman(1023) should return the string MXXIII
    convertToRoman(2014) should return the string MMXIV
    convertToRoman(3999) should return the string MMMCMXCIX


        my solution

        function convertToRoman(num) {

            let strnum = String(num).split('');
            
            let decimal = strnum[strnum.length - 1]
            let decena  = strnum[strnum.length - 2]
            let centena = strnum[strnum.length - 3]
            let milena  = strnum[strnum.length - 4]

            let res1 = '';
            let res2 = '';
            let res3 = '';
            let res4 = '';
            
            let roman = {
                1: 'I', 4: 'IV', 5: 'V', 9: 'IX', 10: 'X', 40: 'XL', 50: 'L', 90: 'XC', 
                100: 'C', 400: 'CD', 500: 'D', 900: 'CM', 1000: 'M'
            }
            
            switch(decimal) {
            case '1':
                res1 = roman[1];
                break;
            case '2':
                res1 = roman[1] + roman[1];
                break;
            case '3':
                res1 = roman[1] + roman[1] + roman[1];
                break;
            case '4':
                res1 = roman[4];
                break;
            case '5':
                res1 = roman[5];
                break;
            case '6':
                res1 = roman[5] + roman[1];
                break;
            case '7':
                res1 = roman[5] + roman[1] + roman[1];
                break;
            case '8':
                res1 = roman[5] + roman[1] + roman[1] + roman[1];
                break;
            case '9':
                res1 = roman[9];
                break;
            }
            switch(decena) {
            case '1':
                res2 = roman[10];
                break;
            case '2':
                res2 = roman[10] + roman[10];
                break;
            case '3':
                res2 = roman[10] + roman[10] + roman[10];
                break;
            case '4':
                res2 = roman[40];
                break;
            case '5':
                res2 = roman[50];
                break;
            case '6':
                res2 = roman[50] + roman[10];
                break;
            case '7':
                res2 = roman[50] + roman[10] + roman[10];
                break;
            case '8':
                res2 = roman[50] + roman[10] + roman[10] + roman[10];
                break;
            case '9':
                res2 = roman[90];
                break;
            }
            switch(centena) {
            case '1':
                res3 = roman[100];
                break;
            case '2':
                res3 = roman[100] + roman[100];
                break;
            case '3':
                res3 = roman[100] + roman[100] + roman[100];
                break;
            case '4':
                res3 = roman[400];
                break;
            case '5':
                res3 = roman[500];
                break;
            case '6':
                res3 = roman[500] + roman[100];
                break;
            case '7':
                res3 = roman[500] + roman[100] + roman[100];
                break;
            case '8':
                res3 = roman[500] + roman[100] + roman[100] + roman[100];
                break;
            case '9':
                res3 = roman[900];
                break;
            }
            switch(milena) {
            case '1':
                res4 = roman[1000];
                break;
            case '2':
                res4 = roman[1000] + roman[1000];
                break;
            case '3':
                res4 = roman[1000] + roman[1000] + roman[1000];
                break;
            }
            
            return res4 + res3 + res2 + res1;
            
        }






Caesars Cipher

    One of the simplest and most widely known ciphers is a Caesar cipher, also known as a shift cipher. 
    In a shift cipher the meanings of the letters are shifted by some set amount.

    A common modern use is the ROT13 cipher, where the values of the letters are shifted by 13 places. Thus A ↔ N, B ↔ O and so on.

    Write a function which takes a ROT13 encoded string as input and returns a decoded string.

    All letters will be uppercase. Do not transform any non-alphabetic character (i.e. spaces, punctuation), but do pass them on.

    rot13("SERR PBQR PNZC") should decode to the string FREE CODE CAMP
    rot13("SERR CVMMN!") should decode to the string FREE PIZZA!
    rot13("SERR YBIR?") should decode to the string FREE LOVE?
    rot13("GUR DHVPX OEBJA SBK WHZCF BIRE GUR YNML QBT.") should decode to the string THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG.

        my solution:

            function rot13(str) {

                let abc = {
                    "A": "N", "B": "O","C": "P","D": "Q","E": "R","F": "S","G": "T","H": "U","I": "V","J": "W","K": "X","L": "Y","M": "Z","N": "A","O": "B","P": "C","Q": "D","R": "E","S": "F","T": "G","U": "H","V": "I","W": "J","X": "K","Y": "L","Z": "M"
                }
                    
                return str.split('')
                        .map(lett => abc[lett] || lett)
                        .join('');
            }






Telephone Number Validator

    Return true if the passed string looks like a valid US phone number.

    The user may fill out the form field any way they choose as long as it has the format of a valid US number. 
    The following are examples of valid formats for US numbers (refer to the tests below for other variants):

    555-555-5555
    (555)555-5555
    (555) 555-5555
    555 555 5555
    5555555555
    1 555 555 5555

    For this challenge you will be presented with a string such as 800-692-7753 or 8oo-six427676;laskdjf. 
    Your job is to validate or reject the US phone number based on any combination of the formats provided above. 
    The area code is required. If the country code is provided, you must confirm that the country code is 1. 
    Return true if the string is a valid US phone number; otherwise return false.


    telephoneCheck("555-555-5555") should return a boolean.
    telephoneCheck("1 555-555-5555") should return true.
    telephoneCheck("1 (555) 555-5555") should return true.
    telephoneCheck("5555555555") should return true.
    telephoneCheck("555-555-5555") should return true.
    telephoneCheck("(555)555-5555") should return true.
    telephoneCheck("1(555)555-5555") should return true.
    telephoneCheck("555-5555") should return false.
    telephoneCheck("5555555") should return false.
    telephoneCheck("1 555)555-5555") should return false.
    telephoneCheck("1 555 555 5555") should return true.
    telephoneCheck("1 456 789 4444") should return true.
    telephoneCheck("123**&!!asdf#") should return false.
    telephoneCheck("55555555") should return false.
    telephoneCheck("(6054756961)") should return false.
    telephoneCheck("2 (757) 622-7382") should return false.
    telephoneCheck("0 (757) 622-7382") should return false.
    telephoneCheck("-1 (757) 622-7382") should return false.
    telephoneCheck("2 757 622-7382") should return false.
    telephoneCheck("10 (757) 622-7382") should return false.
    telephoneCheck("27576227382") should return false.
    telephoneCheck("(275)76227382") should return false.
    telephoneCheck("2(757)6227382") should return false.
    telephoneCheck("2(757)622-7382") should return false.
    telephoneCheck("555)-555-5555") should return false.
    telephoneCheck("(555-555-5555") should return false.
    telephoneCheck("(555)5(55?)-5555") should return false.
    telephoneCheck("55 55-55-555-5") should return false.
    telephoneCheck("11 555-555-5555") should return false.

        my solution:

            function telephoneCheck(str) {

                let regex1 = /^(1?)([-]?[ ]?)([(]\d{3}[)])([-]?[ ]?)(\d{3})([-]?[ ]?)(\d{4}$)/
                let regex2 = /^(1?)([-]?[ ]?)(\d{3})([-]?[ ]?)(\d{3})([-]?[ ]?)(\d{4}$)/

                return regex1.test(str) || regex2.test(str);
            }





