operators



set object

    The Set object lets you store unique values of any type, 
    whether primitive values or object references.

    Set objects are collections of values. A value in the Set may only occur once; 
    it is unique in the Set's collection. You can iterate through the elements of a set in insertion order. 

    Set()
        Creates a new Set object.

    Set.prototype.size
        Returns the number of values in the Set object.

    Set.prototype.add()
        Inserts a new element with a specified value in to a Set object, 
        if there isn't an element with the same value already in the Set.

    Set.prototype.clear()
        Removes all elements from the Set object.

    Set.prototype.delete()
        Removes the element associated to the value and returns a boolean asserting whether
        an element was successfully removed or not. Set.prototype.has(value) will return false afterwards.

    Set.prototype.has()
        Returns a boolean asserting whether an element is present with the given value in the Set object or not.


    using the set object

        const mySet1 = new Set()

        mySet1.add(1)           // Set [ 1 ]
        mySet1.add(5)           // Set [ 1, 5 ]
        mySet1.add(5)           // Set [ 1, 5 ]
        mySet1.add('some text') // Set [ 1, 5, 'some text' ]
        const o = {a: 1, b: 2}
        mySet1.add(o)

        mySet1.add({a: 1, b: 2})   // o is referencing a different object, so this is okay

        mySet1.has(1)              // true
        mySet1.has(3)              // false, since 3 has not been added to the set
        mySet1.has(5)              // true
        mySet1.has(Math.sqrt(25))  // true
        mySet1.has('Some Text'.toLowerCase()) // true
        mySet1.has(o)              // true

        mySet1.size         // 5

        mySet1.delete(5)    // removes 5 from the set
        mySet1.has(5)       // false, 5 has been removed

        mySet1.size         // 4, since we just removed one value

        mySet1.add(5)       // Set [1, 'some text', {...}, {...}, 5] - a previously deleted item will be added as a new item, it will not retain its original position before deletion

        console.log(mySet1)
        // logs Set(5) [ 1, "some text", {…}, {…}, 5 ] in Firefox
        // logs Set(5) { 1, "some text", {…}, {…}, 5 } in Chrome


    tiene mas propiedades y mas usos que por ahora no voy a usar





The arguments object

    arguments is an Array-like object accessible inside functions 
    that contains the values of the arguments passed to that function.

        function func1(a, b, c) {
            console.log(arguments[0]);

            console.log(arguments[1]);

            console.log(arguments[2]);
        }

        func1(1, 2, 3);     //  1 , 2 , 3

    Note: In modern code, rest parameters should be preferred.

    You can refer to a function's arguments inside that function by using its arguments object. 
    It has entries for each argument the function was called with, with the first entry's index at 0.

    For example, if a function is passed 3 arguments, you can access them as follows:

        arguments[0] // first argument
        arguments[1] // second argument
        arguments[2] // third argument

    The arguments object is useful for functions called with more arguments than they are formally declared to accept, 
    called variadic functions, such as Math.min(). 
    This example function accepts any number of string arguments and returns the longest one:

        function longestString() {
            let longest = '';
            for (let i = 0; i < arguments.length; i++) {
                if (arguments[i].length > longest.length) {
                    longest = arguments[i];
                }
            }
            return longest;
        }

    You can use arguments.length to count how many arguments the function was called with.
    
    tambien se pueden reasignar los valores de los argumentos recibidos.

        arguments[1] = 'new value';

    y alguna otra cosa mas


number()
    One way to convert a string into a number would be to use the Number() function.
        
        let quantity = "12";
        quantity = Number(quantity);



typeof

    The typeof operator returns a string indicating the type of the operand's value.

    console.log(typeof 42);
    // expected output: "number"

    console.log(typeof 'blubber');
    // expected output: "string"

    console.log(typeof true);
    // expected output: "boolean"

    console.log(typeof undeclaredVariable);
    // expected output: "undefined"



The Boolean Object/FUNCTION

    There is also a native JavaScript object that wraps around a value. 
    The value passed as the first parameter is converted to a boolean value, if necessary. 
    If a value is omitted, 0, -0, null, false, NaN, undefined, or the empty string (""), the object has an initial value of false. 
    All other values, including any object or the string “false”, create an object with an initial value of true.

    Do not confuse the primitive Boolean values true and false with the true and false values of the Boolean object.

        example using filter method

            function bouncer(arr) {
                return arr.filter(Boolean);
            }

        filter receive each arr item and applies the Boolean function to it to check if it is true or false
        then return the filtered array.
            



--------------------------------------------------------------------

methods



.split()

    https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/split

    The split() method takes a pattern and divides a String into an ordered list of substrings 
    by searching for the pattern, puts these substrings into an array, and returns the array.

        const str = 'The quick brown fox jumps over the lazy dog.';

        const words = str.split(' ');
        console.log(words[3]);
        // expected output: "fox"

        // words value is 
            [
                'The',   'quick',
                'brown', 'fox',
                'jumps', 'over',
                'the',   'lazy',
                'dog.'
            ]


        const chars = str.split('');
        console.log(chars[8]);
        // expected output: "k"

        // chars value is
            [
                'T', 'h', 'e', ' ', 'q', 'u', 'i',
                'c', 'k', ' ', 'b', 'r', 'o', 'w',
                'n', ' ', 'f', 'o', 'x', ' ', 'j',
                'u', 'm', 'p', 's', ' ', 'o', 'v',
                'e', 'r', ' ', 't', 'h', 'e', ' ',
                'l', 'a', 'z', 'y', ' ', 'd', 'o',
                'g', '.'
            ]


        const strCopy = str.split();
        console.log(strCopy);
        // expected output: ["The quick brown fox jumps over the lazy dog."]


        split can receive two paremeters, but for now I only care the first one.
        that parameter tells the split when to stop, pushing to in the array and to be continue
        if that parameter is empty, the split will generate an array with the entire string
        if that parameter is a empty string, the split will generate an array with each of the characters
        if that parameter is a space (' '), split will generate an array and push in 
        the content every time he finds a space 



Math.max()

    wait for numbers separated by commas and returns the largest number
    or NaN if he can't solve it



Math.sqrt()

    The Math.sqrt() function returns the square root of a number.

        function calcHypotenuse(a, b) {
            return (Math.sqrt((a * a) + (b * b)));
        }

        console.log(calcHypotenuse(3, 4));
        // expected output: 5

        console.log(calcHypotenuse(5, 12));
        // expected output: 13

        console.log(calcHypotenuse(0, 0));
        // expected output: 0

        Math.sqrt(9); // 3



findIndex()

    The findIndex() method returns the index of the first element in an array 
    that satisfies the provided testing function. 
    If no elements satisfy the testing function, -1 is returned.


        const array1 = [5, 12, 8, 130, 44];

        const isLargeNumber = (element) => element > 13;

        console.log(array1.findIndex(isLargeNumber));



Map()

    is an excelent resource for iterating arrays, better than foor loop.

    The map() method is used for creating a new array from an existing one, 
    applying a function to each one of the elements of the first array.
    se le aplica la funcion asignada a cada uno de los elementos dentro del array.

            const numbers = [1, 2, 3, 4];
            const doubled = numbers.map(item => item * 2);
            console.log(doubled); // [2, 4, 6, 8]
        
    and this is an example using the function Math.max and spread operator (...) to split an array
    because Math.max only works with numbers and not with arrays.
        note: this function is made to receive an array of arrays
        that is why he need split the item, because item is an array inside another array 
        (arr), the one being mapped.

            const largestOfFour = (arr) => arr.map(item => Math.max(...item));
        
        remember that the .map() method always returns an array that contains each of
        operators that it resolved in each iteration.
        so

            largestOfFour([[1, 2, 3], [4, 5, 6]]);  //  [3, 6]


    if in a map() we want it to return an objet, 
    we have to write the funcion between ({})
    like:
        .map(movie => ({title: movie.Title, rating: movie.imdbRating}));

    when movie is an element of an array containing objects
    where this objets contains properties like Title and imdbRating.
    So this return an object because the function is between ({})



method .toLowerCase() 

    will return the value of the string converted to lower case. The original string is not changed.

    string.toLowerCase()

    Examples
    var shout = "I AM SHOUTING VERY LOUDLY"
    var whisper = shout.toLowerCase()
    
    console.log(shout) // will return "I AM SHOUTING VERY LOUDLY"
    console.log(whisper) // will return "i am shouting very loudly"

    same for .toUpperCase()
        


The replace() 
    
    method returns a new string with some or all matches of a pattern replaced by a replacement. 
    The pattern can be a string or a RegExp, 
    and the replacement can be a string or a function to be called for each match.

    
    str.replace(regexp|substr, newSubStr|function[, flags])

        var str = 'Twas the night before Xmas...';
        var newstr = str.replace(/xmas/i, 'Christmas');
        console.log(newstr);  // Twas the night before Christmas...



filter()

    Array.prototype.filter
    The filter method takes an array as an input. 
    It takes each element in the array and it applies a conditional statement against it. 
    If this conditional returns true, the element gets “pushed” to the output array.

    Once each element in the input array is “filtered” as such, 
    it outputs a new array containing each element that returned true.

    In this example below, there is an array that has multiple objects within it. 
    Normally, to iterate through this array, you might use a for loop.

    In this case, we want to get all the students whose grades are greater than or equal to 90.

            var students = [
                { name: 'Quincy', grade: 96 },
                { name: 'Jason', grade: 84 },
                { name: 'Alexis', grade: 100 },
                { name: 'Sam', grade: 65 },
                { name: 'Katie', grade: 90 }
            ];

            var studentsGrades = []
            for (var i = 0; i < students.length; i++) {
                if (students[i].grade >= 90) {
                    studentsGrades.push(students[i])
                }
            }

            return studentsGrades; // [ { name: 'Quincy', grade: 96 }, { name: 'Alexis', grade: 100 }, { name: 'Katie', grade: 90 } ]


    This for loop works, but it is pretty lengthy. 
    It can also become tedious to write for loops over and over again for many arrays that you need to iterate through.
    This is a great use case for filter!

    Here is the same example using filter:

                var students = [
                    { name: 'Quincy', grade: 96 },
                    { name: 'Jason', grade: 84 },
                    { name: 'Alexis', grade: 100 },
                    { name: 'Sam', grade: 65 },
                    { name: 'Katie', grade: 90 }
                ];

                var studentGrades = students.filter(function (student) {
                    return student.grade >= 90;
                });

                return studentGrades; // [ { name: 'Quincy', grade: 96 }, { name: 'Alexis', grade: 100 }, { name: 'Katie', grade: 90 } ]


    The filter method is much faster to write and cleaner to read while still accomplishing the same thing. 
    Using ES6 syntax we can even replicate the 6-line for-loop with filter:

                var students = [
                    { name: 'Quincy', grade: 96 },
                    { name: 'Jason', grade: 84 },
                    { name: 'Alexis', grade: 100 },
                    { name: 'Sam', grade: 65 },
                    { name: 'Katie', grade: 90 }
                ];

                var studentGrades = students.filter(student => student.grade >= 90);
                return studentGrades; 

                    // [ { name: 'Quincy', grade: 96 }, { name: 'Alexis', grade: 100 }, { name: 'Katie', grade: 90 } ]


    Filter is very useful and a great choice over for loops to filter arrays against conditional statements.



sort()

    este metodo se puede usar sin parametros pero la forma que utiliza para ordenar los elementos de un array
    no es util si no son numeros ya que compara solo el primer digito.

    hay que usarla con parametros para comparar efectivamente numeros de varios digitos

    allow receive a CompareFunction
    Specifies a function that defines the sort order. 

    If compareFn is supplied, all non-undefined array elements 
    are sorted according to the return value of the compare function 
    (all undefined elements are sorted to the end of the array, with no call to compareFn).

    compareFn(a, b)     return value	    sort order
                            > 0	                sort a after b
                            < 0	                sort a before b
                            === 0	            keep original order of a and b

        The following function will sort the array in ascending order

            function compareNumbers(a, b) {
                return a - b;
            }

            const numberArray = [40, 1, 5, 200];
            numberArray.sort(compareNumbers); // [1, 5, 40, 200]

            const points = [40, 100, 1, 5, 25, 10];
            // Sort the numbers in ascending order
            points.sort(function(a, b){return a-b});

            const points = [40, 100, 1, 5, 25, 10];
            // Sort the numbers in descending order:
            points.sort(function(a, b){return b-a});


            function compare(a, b){
                if (a < b){return -1;}
                if (a > b){return 1;}
                if (a === b){return 0;}
            }

            var myArray = [1, 2, 23, 13];
            console.log(myArray.sort(compare));   // [ 1, 2, 13, 23 ]


            Solamente le decís al sort cómo saber cuándo un valor va antes o después de otro
            sobre esos 2 parametros que recibe: Dos ítems cualquiera del array, 
            el sort la va a llamar a la función reiteradas veces, comparando entre sí todos los elementos del array.

            los valores que devuelve, negativo, 0 o positivo son para decirle al sort donde ordenar.

            sort espera recibir un valor negativo, 0 o positivo.
            en base al valor que recibe, decide si a va antes o despues que b
            a y b son elementos del array que esta queriendo ordenar
            va a iterar una y otra vez hasta que compare todos los elementos del array

            hay + del sort en functionalProgramming.txt



concat()

    Array.prototype.concat()
    The concat() method is used to merge two or more arrays. 
    This method does not change the existing arrays, but instead returns a new array.
                
         const array1 = ['a', 'b', 'c'];
        const array2 = ['d', 'e', 'f'];
        const array3 = array1.concat(array2);

        console.log(array3);
        // expected output: Array ["a", "b", "c", "d", "e", "f"]

        Concatenating three arrays
            
            const num1 = [1, 2, 3];
            const num2 = [4, 5, 6];
            const num3 = [7, 8, 9];

            const numbers = num1.concat(num2, num3);

            console.log(numbers);
            // results in [1, 2, 3, 4, 5, 6, 7, 8, 9]

        Concatenating values to an array
            
            const letters = ["a", "b", "c"];

            const alphaNumeric = letters.concat(1, [2, 3]);

            console.log(alphaNumeric);
            // results in ['a', 'b', 'c', 1, 2, 3]

        Concatenating nested arrays
            
            const num1 = [[1]];
            const num2 = [2, [3]];

            const numbers = num1.concat(num2);

            console.log(numbers);
            // results in [[1], 2, [3]]
    


every()

    The every() method tests whether all elements in the array pass the test implemented by the provided function.

        arr.every(callback[, thisArg])

    Parameters

        callback: Function to test for each element, taking three arguments:
        currentValue: (required)The current element being processed in the array.
        index: (optional)The index of the current element being processed in the array.
        array: (optional)The array every was called upon.
        thisArg: Optional. Value to use as this when executing callback.

    The every method calls the callback function one time for each array element, 
    in ascending index order, until the callback function returns false. 
    If an element that causes callback to return false is found, the every method immediately returns false . 
    Otherwise, the every method returns true .

    The every method works with arrays to check if every element passes a particular test. 
    It returns a Boolean value - true if all values meet the criteria, false if not.

    In addition to array objects, the every method can be used by any object 
    that has a length property and that has numerically indexed property names. 
    every does not mutate the array on which it is called.

          function isBigEnough(element, index, array) {
            return element >= 10;
        }
        [12, 5, 8, 130, 44].every(isBigEnough);   // false
        [12, 54, 18, 130, 44].every(isBigEnough); // true


        also work without index and array parameters.



some()

    The some method works with arrays to check if any element passes a particular test. 
    It returns a Boolean value - true if any of the values meet the criteria, false if not.

    For example, the following code would check if any element in the numbers array is less than 10:

        const numbers = [10, 50, 8, 220, 110, 11];

        numbers.some(function(currentValue) {
            return currentValue < 10;
        });

    The some method would return true.

    

Array.prototype.forEach()

    The forEach() method executes a provided function once for each array element.


        const array1 = ['a', 'b', 'c'];
        array1.forEach(element => console.log(element));

        // expected output: "a"
        // expected output: "b"
        // expected output: "c"

    no modifica el array original a menos que la funcion asignada lo haga
    puede recibir mas parametros y tiene mas funcionalidades de las que fueron descriptas aca



reduce()

    es un poco complex asi que lo voy a explicar en espanhol

    reduce trabaja sobre un array, puede recibir hasta 4 parametros pero vamos a trabajar solo con los 2 primeros
    el primero es el acumulador y el segundo es el elemento del array sobre el que va a trabajar (iteracion)
    trabaja con una funcion "callback" porque va a ejecutarse por cada elemento del array, y ademas de la funcion
    tambien se le da un valor que va a ser el valor inicial para el acumulador

            array.reduce((acumulador, elemento) => loQueQuierasRetornar, valorDelAcumuladorInicial)

            let arr = [1, 2, 3];
            arr.reduce((acu, ele) => acu + ele, 0);     //      6

    acumulador significa que es el valor que retorna cada vez que se ejecuta la funcion
    en ese ejemplo, empieza valiendo 0 porque es el valor que le dimos como segundo parametro de salida en la funcion
    
        empieza acu + ele === 0 + 1    //  1
            ahora acu vale 1 
        sigue acu + ele === 1 + 2   //   3
            ahora acu vale 3
        sigue acu + ele === 3 + 3   //  6
            ahora acu vale 6

    
    NOTE: si el parametro de valor inicial para el acumulador se omite, tambien se omite la primer iteracion
    y se pasa directamente a la segunda, utilizando el valor del primer elemento como valor de acumulacion
    osea, en el caso anterior, el programa empieza en la segunda iteracion siendo el primer valor del Array
    el valor de acu, osea empieza en 1 + 2


    un ejemplo un poco mas complejo con objetos

        const jogadores = [
            { name: 'Neymar', numTag: 10, pos: 'attack' },
            { name: 'Messi', numTag: 30, pos: 'attack' },
            { name: 'Marquinhos', numTag: 3, pos: 'deffender' }
        ];

        let numTagsJogao = jogadores.reduce((obj, jogador) => { 
            obj[jogador.name] = jogador.pos
            return obj;
        }, {});

        console.log(numTagsJogao)       //      { Neymar: 'attack', Messi: 'attack', Marquinhos: 'deffender' }


            ahi se ve una forma de asignar valores a un objeto
            tiene 2 parametros de entrada (obj, jogador)
            obj va a ser el acumulador y jogador es el elemento del array donde esta iterando
            tiene a un objeto vacio {} como valor inicial del acumulador
            asi que empieza asignando al objeto vacio el jogador.name como propiedad y jogador.numTag como valor
            y retorna ese objeto, en cada iteracion vuelve a hacer una asignacion de valores a ese objeto



.join()

    The join method is used to join the elements of an array together to create a string. 
    It takes an argument for the delimiter that is used to separate the array elements in the string.

    Here's an example:

        const arr = ["Hello", "World"];
        const str = arr.join(" ");
    
    str would have a value of the string Hello World.



trim()

    The trim() method removes whitespace from both ends of a string and returns a new string, 
    without modifying the original string. 
    Whitespace in this context is all the whitespace characters 
    (space, tab, no-break space, etc.) and all the line terminator characters (LF, CR, etc.).

            const greeting = '   Hello world!   ';

            console.log(greeting);
            // expected output: "   Hello world!   ";

            console.log(greeting.trim());
            // expected output: "Hello world!";



includes()

    The includes() method determines whether an array includes a certain value among its entries, 
    returning true or false as appropriate.

        const array1 = [1, 2, 3];

        console.log(array1.includes(2));
        // expected output: true

        const pets = ['cat', 'dog', 'bat'];

        console.log(pets.includes('cat'));
        // expected output: true

        console.log(pets.includes('at'));
        // expected output: false



object.values()

    The Object.values() method returns an array of a given object's own enumerable property values, 
    in the same order as that provided by a for...in loop. 
    (The only difference is that a for...in loop enumerates properties in the prototype chain as well.)

        const object1 = {
            a: 'somestring',
            b: 42,
            c: false
        };

        console.log(Object.values(object1));
        // expected output: Array ["somestring", 42, false]



Array.from()
    NO LO TENGO CLARO

    El método Array.from() crea una nueva instancia de Array a partir de un objeto iterable.

        console.log(Array.from('foo'));
        // expected output: Array ["f", "o", "o"]

    arguments es un objeto iterable

        function f() {
            return Array.from(arguments);
        }

        f(1, 2, 3);

        // [ 1, 2, 3 ]



flat()

    Array.prototype.flat()
    The flat() method creates a new array with all sub-array elements 
    concatenated into it recursively up to the specified depth.

        const arr1 = [0, 1, 2, [3, 4]];

        console.log(arr1.flat());
        // expected output: [0, 1, 2, 3, 4]

        const arr2 = [0, 1, 2, [[[3, 4]]]];

        console.log(arr2.flat(2));
        // expected output: [0, 1, 2, [3, 4]]

    syntax

        flat()
        flat(depth)

        The depth level specifying how deep a nested array structure should be flattened. Defaults to 1.


            const arr = [1, 2, [3, 4]];

            // To flat single level array
            arr.flat();
            // is equivalent to
            arr.reduce((acc, val) => acc.concat(val), []);
            // [1, 2, 3, 4]

            // or with decomposition syntax
            const flattened = (arr) => [].concat(...arr);


    Flattening nested arrays

        const arr1 = [1, 2, [3, 4]];
        arr1.flat();
        // [1, 2, 3, 4]

        const arr2 = [1, 2, [3, 4, [5, 6]]];
        arr2.flat();
        // [1, 2, 3, 4, [5, 6]]

        const arr3 = [1, 2, [3, 4, [5, 6]]];
        arr3.flat(2);
        // [1, 2, 3, 4, 5, 6]

        const arr4 = [1, 2, [3, 4, [5, 6, [7, 8, [9, 10]]]]];
        arr4.flat(Infinity);
        // [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

    
    The flat() method removes empty slots in arrays:

        const arr5 = [1, 2, , 4, 5];
        console.log(arr5.flat()); // [1, 2, 4, 5]

        const array = [1, , 3, ["a", , "c"]];
        console.log(array.flat()); // [ 1, 3, "a", "c" ]

        const array2 = [1, , 3, ["a", , ["d", , "e"]]];
        console.log(array2.flat()); // [ 1, 3, "a", ["d", empty, "e"] ]
        console.log(array2.flat(2)); // [ 1, 3, "a", "d", "e"]


    flat() have much more material.... 




String.prototype.substr

    The substr() method extracts parts of a string, 
    beginning at the character at the specified position, 
    and returns the specified number of characters.

    Syntax
    
        string.substr(start, length);
    
  
    Parameter   start	
        Required. The position where to start the extraction. First character is at index 0.
        If start is positive and greater than, or equal, to the length of the string, substr() returns an empty string.
        If start is negative, substr() uses it as a character index from the end of the string.
        If start is negative or larger than the length of the string, start is set to 0|
        |length|Optional . The number of characters to extract. If omitted, it extracts the rest of the string|

    Examples:

        let str = "Hello world!";
        let res = str.substr(1, 4);

    The result of res will be:
        ello



charAt() 
    
    method returns the specified character from a string.

    Syntax
        
        str.charAt(index)

    index
    An integer between 0 and 1-less-than the length of the string.


        var anyString = 'Brave new world';

        console.log(anyString.charAt(0));   // 'B'
        console.log(anyString.charAt(1));   // 'r'
        console.log(anyString.charAt(2));   // 'a'
        console.log(anyString.charAt(3));   // 'v'
        console.log(anyString.charAt(4));   // 'e'
        console.log(anyString.charAt(999)); // ''



charCodeAt()

    The charCodeAt() method returns the numeric Unicode value of the character 
    at the given index (except for unicode codepoints > 0x10000).

    Syntax

        str.charCodeAt(index)

    index
    An integer greater than or equal to 0 and less than the length of the string; 
    if it is not a number, it defaults to 0.

        'ABC'.charCodeAt(0);        // returns 65

        var str = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"; 
        document.write(str.charCodeAt(str.length - 1));     // Output: 90



String.fromCharCode()

    The static String.fromCharCode() method returns a string 
    created by using the specified sequence of Unicode values.

    Syntax

        String.fromCharCode(num1[, ...[, numN]])

    Parameters
    num1, …, numN

    A sequence of numbers that are Unicode values.
        
        String.fromCharCode(65, 66, 67);  // "ABC"

        var test = String.fromCharCode(112, 108, 97, 105, 110);
        document.write(test);       // Output: plain



toString()

    The toString() method returns a string representing the object.

        const arr = [1, 2, 3];

        arr.toString() // "1,2,3"

    also it is good for flatted arrays

        [[[1]], [3, [[4]]]].toString()

        //1,3,4











