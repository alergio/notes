operators



typeof

    The typeof operator returns a string indicating the type of the operand's value.

    console.log(typeof 42);
    // expected output: "number"

    console.log(typeof 'blubber');
    // expected output: "string"

    console.log(typeof true);
    // expected output: "boolean"

    console.log(typeof undeclaredVariable);
    // expected output: "undefined"



--------------------------------------------------------------------

methods



.split()

    https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/split

    The split() method takes a pattern and divides a String into an ordered list of substrings 
    by searching for the pattern, puts these substrings into an array, and returns the array.

        const str = 'The quick brown fox jumps over the lazy dog.';

        const words = str.split(' ');
        console.log(words[3]);
        // expected output: "fox"

        // words value is 
            [
                'The',   'quick',
                'brown', 'fox',
                'jumps', 'over',
                'the',   'lazy',
                'dog.'
            ]


        const chars = str.split('');
        console.log(chars[8]);
        // expected output: "k"

        // chars value is
            [
                'T', 'h', 'e', ' ', 'q', 'u', 'i',
                'c', 'k', ' ', 'b', 'r', 'o', 'w',
                'n', ' ', 'f', 'o', 'x', ' ', 'j',
                'u', 'm', 'p', 's', ' ', 'o', 'v',
                'e', 'r', ' ', 't', 'h', 'e', ' ',
                'l', 'a', 'z', 'y', ' ', 'd', 'o',
                'g', '.'
            ]


        const strCopy = str.split();
        console.log(strCopy);
        // expected output: ["The quick brown fox jumps over the lazy dog."]


        split can receive two paremeters, but for now I only care the first one.
        that parameter tells the split when to stop, pushing to in the array and to be continue
        if that parameter is empty, the split will generate an array with the entire string
        if that parameter is a empty string, the split will generate an array with each of the characters
        if that parameter is a space (' '), split will generate an array and push in 
        the content every time he finds a space 



Math.max()

    wait for numbers separated by commas and returns the largest number
    or NaN if he can't solve it



Map()

    is an excelent resource for iterating arrays, better than foor loop.

    The map() method is used for creating a new array from an existing one, 
    applying a function to each one of the elements of the first array.
    se le aplica la funcion asignada a cada uno de los elementos dentro del array.

            const numbers = [1, 2, 3, 4];
            const doubled = numbers.map(item => item * 2);
            console.log(doubled); // [2, 4, 6, 8]
        
    and this is an example using the function Math.max and spread operator (...) to split an array
    because Math.max only works with numbers and not with arrays.
        note: this function is made to receive an array of arrays
        that is why he need split the item, because item is an array inside another array 
        (arr), the one being mapped.

            const largestOfFour = (arr) => arr.map(item => Math.max(...item));
        
        remember that the .map() method always returns an array that contains each of
        operators that it resolved in each iteration.
        so

            largestOfFour([[1, 2, 3], [4, 5, 6]]);  //  [3, 6]



method .toLowerCase() 

    will return the value of the string converted to lower case. The original string is not changed.

    string.toLowerCase()

    Examples
    var shout = "I AM SHOUTING VERY LOUDLY"
    var whisper = shout.toLowerCase()
    
    console.log(shout) // will return "I AM SHOUTING VERY LOUDLY"
    console.log(whisper) // will return "i am shouting very loudly"

    same for .toUpperCase()
        


The replace() 
    
    method returns a new string with some or all matches of a pattern replaced by a replacement. 
    The pattern can be a string or a RegExp, 
    and the replacement can be a string or a function to be called for each match.

    
    str.replace(regexp|substr, newSubStr|function[, flags])

        var str = 'Twas the night before Xmas...';
        var newstr = str.replace(/xmas/i, 'Christmas');
        console.log(newstr);  // Twas the night before Christmas...


















