APUNTES DE JAVASCRIPT

GENERALLY

"typeof x" return a string about type of the value
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
COMENTARIOS

los comentarios se hacen con // para comentar una linea
o para comentar varias lineas se usa /* y aca empieza el comentario
y sigue hasta q termina asi */ 

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
VARIABLES

    data is anything that is meaningful to the computer.
    JavaScript provides eight different data types which are 
    undefined, null, boolean, string, symbol, bigint, number, and object.
    For example, computers distinguish between numbers, such as the number 12, 
    and strings, such as "12", "dog", or "123 cats", which are collections of characters. 
    Computers can perform mathematical operations on a number, but not on a string.

    Variables allow computers to store and manipulate data
    They do this by using a "label" to point to the data rather than using the data itself.

    las variables son un simple nombre que representa datos.

    en js se crean con 'var' o 'let', explico diferencias abajo, like this 
        
        var ourName;
        let ourName;

        creamos una variable llamada ourName

    In JavaScript we end statements with semicolons. 

    - - - - - 

    ASIGNACION DE VALORES

    In JavaScript, you can store a value in a variable with the assignment operator (=)

        myVariable = 5;

        le asignamos el number value 5 a la variable myVariable

    ???? If there are any calculations to the right of the = operator, those are performed before the value is assigned to the variable on the left of the operator. ????

        var myVar;
        myVar = 5;

        First, this code creates a variable named myVar. 
        Then, the code assigns 5 to myVar. 
        Now, if myVar appears again in the code, the program will treat it as if it is 5.


    After a value is assigned to a variable using the assignment operator, you can assign the value of that variable to another variable using the assignment operator.

        var myVar;
        myVar = 5;
        var myNum;
        myNum = myVar;

        declaramos una variable sin valor
        le asignamos valor
        declaramos una sin valor
        le asignamos como valor el valor de la variable declarada antes


    podemos definir la variable y despues asignarle el valor
    o podemos definir la variable y asignarle el valor

        var myVar = 5;

        esto es lo mas comun


    you can also declare string variable like this

        var myName = "your name";

        "your name" is called a string literal. 
        A string literal, or string, is a series of zero or more characters enclosed in single or double quotes.


    cuando declaramos una variable y no le damos valor, despues no podremos realizar operaciones matematicas o suma de strings ya que adoptan el valor de undefined.
        pero si asignamos una variable y le damos valor, despues podemos realizar operaciones con esa variable.


    In JavaScript all variables and function names are case sensitive. This means that capitalization matters.
        MYVAR is not the same as MyVar nor myvar. 
            se recomienda no usar esta funcion del lenguaje para utilizar diferentes variables con las mismas letras pero con diferente casgin

        La mejor practica en JS es camelCase.
            Write variable names in JavaScript in camelCase.
                In camelCase, multi-word variable names have the first word in lowercase and the first letter of each subsequent word is capitalized.

                var someVariable;
                var anotherVariableName;
                var thisVariableNameIsSoLong;

    hay otro declarador de variables en JS que es let, like
        let myVar;

        la diferencia que tiene var y let es que var se puede sobreescribir definiendo una nueva variable con el mismo nombre
            var name = "max";
            var name = "ralph";

            de esta manera la variable se le asignara el valor de max pero luego se reasignara el valor a ralph.
            esto puede desencadenar en accidentes cuando tenemos un codigo muy largo y por error repetimos el nombre de una variable y sin querer le asignamos un nuevo valor.
            
            para eso se creo la nueva forma de definir variables bajo la palabra "let" que no permite sobreescribir una variable con otra.
            si podemos cambiar el valor de la variable cuantas veces querramos con la asignacion de valores pero no podemos crear una variable con el mismo nombre.
            es una buena practica definir las variables con let

    tambien hay otro declarador de variable que es const, like
        const myVar;

        este tipo de variables se denominan constantes y estos si jamas podran ser reasignados con un nuevo valor, se les asigna un valor cuando son declaradas y luego no es posible modificarlo, no se podra sobreescribi al igual que let pero tampoco se podra modificar su valor con una asignacion, por eso son constantes.

        es comun en JS que las constantes se declaren en uppercase y las variables que son modificables en lowercase o camelCase. 

        una variable puede alojar un calculo matematico.

        const suma = 2 + 2
        const multi = 2 * 2


        tambien podemos realizar operaciones matematicas con asignacion de valores

            let numVar = 2
            numVar = numVar * 5

            con las sumas podemos abreviarlo para agregarle 1 with the ++ operator.
                i++;
                is the equivalent of
                i = i + 1;

            lo mismo con las restas
                i--;
                is the equivalent of
                i = i - 1;

    We can store decimal numbers in variables too. Decimal numbers are sometimes referred to as floating point numbers or floats.

        const ourDecimal = 5.7;


    The remainder operator % gives the remainder of the division of two numbers.
        el % da el RESTO de la division ente dos numeros
        es como en la escuela dividiendo solo con numeros ENTEROS
            5 % 2 = 1
            because
            5 / 2 = 2
                y sobra 1
                porque trabajamos en base a cuantas veces entra el 2 en el numero anterior

        un buen metodo para saber si un numero es par es utilizar el operador % y si el resto es 0 significa que el numero es par.
            17 % 2 = 1
                17 es inpar

        a veces el operador de RESTO (remainder operator) "%"   
            se suele confundir con el operador de modulo MOD modulus
            es bastante parecido    
            but does not work properly with negative numbers

    In programming, it is common to use assignments to modify the contents of a variable
        myVar = myVar + 5;

        como esto es una operacion muy regular existe un operador especifico que facilita

            += operator.

            let myVar = 1;
            myVar += 5;
            console.log(myVar);
                la consola mostrara 6.

            same for the -=
                and *=
                    and /=


    Escaping Literal Quotes in Strings = citas dentro de citas, comillas, string dentro de string
        In JavaScript, you can escape a quote from considering it as an end of string quote by placing a backslash (\) in front of the quote.

            const sampleStr = "Alan said, \"Peter is learning JavaScript\".";

            This signals to JavaScript that the following quote is not the end of the string, but should instead appear inside the string. So if you were to print this to the console, you would get:

                Alan said, "Peter is learning JavaScript".


    String values in JavaScript may be written with single or double quotes, 
        as long as you start and end with the same type of quote. 
        Unlike some other programming languages, 
        single and double quotes work the same in JavaScript.
                
            const conversation = 'Finn exclaims to Jake, "Algebraic!"';


            this becomes a problem if you need to use the outermost quotes within it.

            a string has the same kind of quote at the beginning and end. But if you have that same quote somewhere in the middle, the string will stop early and throw an error.

            const goodStr = 'Jake asks Finn, "Hey, let\'s go on an adventure?"';
            const badStr = 'Finn responds, "Let's go!"';

                badStr will throw an error.

                goodStr above, you can use both quotes safely by using the backslash \ as an escape character.



    Escape Sequences in Strings
        Quotes are not the only characters that can be escaped inside a string.

        
            Code	Output
            \'	    single quote
            \"	    double quote
            \\	    backslash
            \n	    newline
            \r	    carriage return
            \t	    tab
            \b	    word boundary
            \f	    form feed

                const myStr = "FirstLine\n\t\\SecondLine\nThirdLine";

                la consola mostrara 

                    FirstLine
                        \SecondLine
                    ThirdLine
                        


    Concatenating Strings with Plus Operator (+)
        in strings  You can build a new string out of other strings by concatenating them together.

            'My name is Alan,' + ' I concatenate.'
        
                Note: Watch out for spaces.
                    Concatenation does not add spaces between concatenated strings, so you'll need to add them yourself.
            
            const ourStr = "I come first. " + "I come second.";

                console: I come first. I come second.

        ejemplo concatenate with variables considering spaces between strings

            const myNoun = "dog";
            const myAdjective = "big";
            const myVerb = "ran";
            const myAdverb = "quickly";
            
            const wordBlanks = myAdjective + " " + myNoun + " " + myVerb + " " + myAdverb;
    



    Concatenating Strings with the Plus Equals Operator (+=)
        concatenate a string onto the end of an existing string variable. 
        This can be very helpful to break a long string over several lines.

            let ourStr = "I come first. ";
            ourStr += "I come second.";

                watch out for spaces


    Constructing Strings with Variables
        you can insert one or more variables into a string you're building.

        const ourName = "freeCodeCamp";
        const ourStr = "Hello, our name is " + ourName + ", how are you?";

            the console will show... 
                Hello, our name is freeCodeCamp, how are you?.


    Appending Variables to Strings
        append variables to a string using the plus equals (+=) operator.

            const anAdjective = "awesome!";
            let ourStr = "freeCodeCamp is ";
            ourStr += anAdjective;

            value of ourStr in console...
                freeCodeCamp is awesome!


    Find the Length of a String
        find the length of a String value by writing .length after the string variable or string literal

            console.log("Alan Peter".length);
                the value 10 would be displayed in the console. Note that the space character between "Alan" and "Peter" is also counted.

            let kk = "KK";
            console.log(kk.length);


    Use Bracket Notation to Find the First Character in a String
        Bracket notation is a way to get a character at a specific index within a string.

        !important 
            Most modern programming languages, like JavaScript, don't start counting at 1 like humans do.
            They start at 0. 
            This is referred to as Zero-based indexing.

            const firstName = "Charles";
            const firstLetter = firstName[0];
                
                firstLetter would have a value of the string C.

                0 representa el primer caracter y asi podemos seleccionar el que querramos


    Use Bracket Notation to Find the Last Character in a String
        For example, if const firstName = "Ada", you can get the value of the last letter of the string by using firstName[firstName.length - 1].

            const firstName = "Ada";
            const lastLetter = firstName[firstName.length - 1];
                
                lastLetter would have a value of the string a

            asi podemos seleccionar el que querramos

    Understand String Immutability
        en js las variables con valores de tipo string no pueden ser modificados mediante las llaves [] para cambiar un caracter individual.

            let myStr = "Bob";
            myStr[0] = "J";

                esto no funcionaria
        
        la unica manera de modificar un string es renombrandolo like this

            let myStr = "Bob";
            myStr = "Job";


////----------------------------------------------------------------////
-------------------------------////////---------------------------------
////----------------------------------------------------------------////


ARRAYS

    Store Multiple Values in one Variable using JavaScript Arrays

        You start an array declaration with an opening square bracket [, end it with a closing square bracket ], 
        and put a comma , between each entry, like this:

            const sandwich = ["peanut butter", "jelly", "bread"];

            with array we can store different type of data, like string and number


    Nest one Array within Another Array

        const teams = [["Bulls", 23], ["White Sox", 45]];

        This is also called a multi-dimensional array.


    Access Array Data with Indexes
        We can access the data inside arrays using indexes.

        Array indexes are written in the same bracket notation that strings use, 
        except that instead of specifying a character, 
        they are specifying an entry in the array. 
        Like strings, arrays use zero-based indexing, 
        so the first element in an array has an index of 0.

            const array = [50, 60, 70];
            console.log(array[0]);
            const data = array[1];

                The console.log(array[0]) prints 50, and data has the value 60.


    Modify Array Data With Indexes
        Unlike strings, the entries of arrays are mutable and can be changed freely, 
        even if the array was declared with const.

        const ourArray = [50, 40, 30];
        ourArray[0] = 15;

            ourArray now has the value [15, 40, 30].

                Note: There shouldn't be any spaces between the array name and the square brackets, like array [0]. 
                Although JavaScript is able to process this correctly, this may confuse other programmers reading your code.


    Access Multi-Dimensional Arrays With Indexes multidimensional

        One way to think of a multi-dimensional array, is as an array of arrays.
        When you use brackets to access your array, 
        the first set of brackets refers to the entries in the outer-most (the first level) array, 
        and each additional pair of brackets refers to the next level of entries inside.

                const arr = [
                    [1, 2, 3],
                    [4, 5, 6],
                    [7, 8, 9],
                    [[10, 11, 12], 13, 14]
                ];

                arr[3];
                arr[3][0];
                arr[3][0][1];

                console.log()
                    arr[3] is [[10, 11, 12], 13, 14], 
                    arr[3][0] is [10, 11, 12], 
                    and arr[3][0][1] is 11.


                const myArray = [
                [1, 2, 3],
                [4, 5, 6],
                [7, 8, 9],
                [[10, 11, 12], 13, 14],
                ];

                const myData = myArray[2][1];

                console.log(myData)
                    8


                        Note: There shouldn't be any spaces between the array name and the square brackets, 
                        like array [0][0] and even this array [0] [0] is not allowed. 
                        Although JavaScript is able to process this correctly, 
                        this may confuse other programmers reading your code.



    Manipulate Arrays With push()
        An easy way to append data to the end of an array is via the push() function.

        .push() takes one or more parameters and "pushes" them onto the end of the array.


                const arr1 = [1, 2, 3];
                arr1.push(4);

                const arr2 = ["Stimpson", "J", "cat"];
                arr2.push(["happy", "joy"]);

                arr1 now has the value [1, 2, 3, 4] 
                and arr2 has the value ["Stimpson", "J", "cat", ["happy", "joy"]].


                const myArray = [["John", 23], ["cat", 2]];
                myArray.push(["dog", 3])
                console.log(myArray)
                    [ [ 'John', 23 ], [ 'cat', 2 ], [ 'dog', 3 ] ]



    Manipulate Arrays With pop()
        Another way to change the data in an array is with the .pop() function.

        .pop() is used to pop a value off of the end of an array.
        We can store this popped off value by assigning it to a variable. 
        In other words, .pop() removes the last element from an array and returns that element.
        Any type of entry can be popped off of an array - numbers, strings, even nested arrays.

                const threeArr = [1, 4, 6];
                const oneDown = threeArr.pop();

                console.log(oneDown);
                console.log(threeArr);

                The first console.log will display the value 6, 
                and the second will display the value [1, 4].


                const myArray = [["John", 23], ["cat", 2]];
                const removedFromMyArray = myArray.pop();

                console.log(removedFromMyArray);
                console.log(myArray);

                    [ 'cat', 2 ]
                    [ [ 'John', 23 ] ]



    Manipulate Arrays With shift()
        .shift() It works just like .pop(), except it removes the first element instead of the last.

                const ourArray = ["Stimpson", "J", ["cat"]];
                const removedFromOurArray = ourArray.shift();

                removedFromOurArray would have a value of the string Stimpson, 
                and ourArray would have ["J", ["cat"]].


                const myArray = [["John", 23], ["dog", 3]];
                const removedFromMyArray = myArray.shift();

                console.log(removedFromMyArray);
                console.log(myArray);

                    [ 'John', 23 ]
                    [ [ 'dog', 3 ] ]



    Manipulate Arrays With unshift()
        .unshift() works exactly like .push(), 
        but instead of adding the element at the end of the array, 
        unshift() adds the element at the beginning of the array.

            const ourArray = ["Stimpson", "J", "cat"];
            ourArray.shift();
            ourArray.unshift("Happy");

            After the shift, ourArray would have the value ["J", "cat"]. 
            After the unshift, ourArray would have the value ["Happy", "J", "cat"].


            const myArray = [["John", 23], ["dog", 3]];
            myArray.shift();
            myArray.unshift(["Paul", 35]);

            console.log(myArray);

                [ [ 'Paul', 35 ], [ 'dog', 3 ] ]

    EXAMPLE creating a multidimensional array with a shopping list in a variable

                one array containing several sub-arrays
                first parameter contains the name of the product
                second parameter contains the qty stock

                    const myList = [
                        ["Parafine", 15],
                        ["Leash", 19],
                        ["Peine", 12],
                        ["Board", 5],
                        ["Sches", 10]
                    ];


////----------------------------------------------------------------////
-------------------------------////////---------------------------------
////----------------------------------------------------------------////


FUNCTIONS

    Write Reusable JavaScript with Functions
        In JavaScript, we can divide up our code into reusable parts called functions.

            function functionName() {
                console.log("Hello World");
            }

        You can call or invoke this function by using its name followed by parentheses, 
            like this: functionName();

        Each time the function is called it will print out the message Hello World on the dev console.
        All of the code between the curly braces {} will be executed every time the function is called.

            function reusableFunction() {
                console.log("Hi World");
            }
            reusableFunction();

            console shown the string "Hi World"


Passing Values to Functions with Arguments

        * 
            parameter is a name
            argument is a value

        (placeholder in this case is like a entrada de data)
    Parameters are variables that act as placeholders for the values that are to be input to a function when it is called. 
    When a function is defined, it is typically defined along with one or more parameters.
    The actual values that are input (or "passed") into a function when it is called are known as ARGUMENTS.

        Here is a function with two parameters, param1 and param2:

            function testFun(param1, param2) {
               console.log(param1, param2);
            }

        Then we can call testFun like this: 
            testFun("Hello", "World");
         We have passed two string arguments, Hello and World. 
         Inside the function, param1 will equal the string Hello and param2 will equal the string World. 
         Note that you could call testFun again with different arguments 
         and the parameters would take on the value of the new arguments

         example

            function functionWithArgs(param1, param2){
               console.log(param1 + param2)
            }
            functionWithArgs("Hello", "World")

            so their console it will show 
                 HelloWorld 


Return a Value from a Function with Return

    We can pass values into a function with arguments. 
    You can use a return statement to send a value back out of a function.

        DEVUELVE VALORES

    Example

        function plusThree(num) {
            return num + 3;
        }
        const answer = plusThree(5);

            answer has the value 8.

        
        function timesFive(num){
            return num * 5;
        }
        console.log(timesFive(1))
 
            console it will show 5


Global Scope and Functions
    In JavaScript, scope refers to the visibility of variables
    Variables which are defined outside of a function block have Global scope. 
    This means, they can be seen everywhere in your JavaScript code.

    Variables which are declared without the let or const keywords are automatically created in the global scope. 
    This can create unintended consequences elsewhere in your code or when running a function again. 
    You should always declare your variables with let or const.

        example

            const myGlobal = 10;     // variable global

            function fun1() {
                oopsGlobal = 5;      // variable global 
            }

            function fun2() {
                var output = "";
                if (typeof myGlobal != "undefined") {
                    output += "myGlobal: " + myGlobal;
                }
                if (typeof oopsGlobal != "undefined") {
                    output += " oopsGlobal: " + oopsGlobal;
                }
                console.log(output);
            }
                    myGlobal: 10 oopsGlobal: 5


Local Scope and Functions
    scope refers to the visibility of variables

    Variables which are declared within a function, 
    as well as the function parameters, have local scope. 
    That means they are only visible within that function.

    Here is a function myTest with a local variable called loc.

            function myTest() {
                const loc = "foo";
                console.log(loc);
            }

            myTest();
            console.log(loc);

                The myTest() function call will display the string foo in the console. 
                The console.log(loc) line (outside of the myTest function) will throw an error, 
                as loc is not defined outside of the function.



            function myLocalScope() {
                let myVar = "c'mon bro";
                console.log('inside myLocalScope', myVar);
            }
            myLocalScope();
            console.log('outside myLocalScope', myVar);                

                inside myLocalScope c'mon bro
                ReferenceError: myVar is not defined


Global vs. Local Scope in Functions
    It is possible to have both local and global variables with the same name.
    When you do this, the local variable takes precedence over the global variable.

            const someVar = "Hat";

            function myFun() {
                const someVar = "Head";
                return someVar;
            }   

                The function myFun will return the string Head 
                because the local version of the variable is present.             


Understanding Undefined Value returned from a Function
    A function can include the return statement but it does not have to.  no es necesario que tenga un return
    In the case that the function doesn't have a return statement, when you call it,
    the function processes the inner code but the returned value is undefined.
        EXAMPLE
                
                let sum = 0;

                function addSum(num) {
                 sum = sum + num;
                }

                addSum(3);

                    addSum is a function without a return statement. 
                    The function will change the global sum variable but the returned value of the function is undefined.


Assignment with a Returned Value
    This means we can take the return value of a function and assign it to a variable.

    Assume we have pre-defined a function sum which adds two numbers together, then:

        ourSum = sum(5, 12);

        will call the sum function, which returns a value of 17 and assigns it to the ourSum variable.

        another example

            let processed = 0;

            function processArg(num) {
                return (num + 3) / 5;
            }

            processed = processArg(7)


Stand in Line
    In Computer Science a queue is an abstract Data Structure where items are kept in order.
    New items can be added at the back of the queue 
    and old items are taken off from the front of the queue.

                function nextInLine(arr, item) {
                    arr.push(item);
                    const firstItem = arr.shift() 
                
                    return firstItem;
                }

                const testArr = [1, 2, 3, 4, 5];

                // Display code
                console.log("Before: " + JSON.stringify(testArr));
                console.log(nextInLine(testArr, 6));
                console.log("After: " + JSON.stringify(testArr));

                Before: [1,2,3,4,5]
                1
                After: [2,3,4,5,6]


Understanding Boolean Values
    Another data type is the Boolean. 
    Booleans may only be one of two values: true or false
    They are basically little on-off switches, where true is on and false is off.
    These two states are mutually exclusive.

    boolean (true and false) no son strings, se escriben asi sin "", like a numbers


Use Conditional Logic with If Statements
    if statements are used to make decisions in code. 
    The keyword if tells JavaScript to execute the code in the curly braces 
    under certain conditions, defined in the parentheses.
    These conditions are known as Boolean conditions and they may only be true or false.

    When the condition evaluates to true, the program executes the statement inside the curly braces.
    When the Boolean condition evaluates to false, the statement inside the curly braces will not execute.


            if (condition is true) {
                statement is executed
            }


        function test(myCondition) {
            if (myCondition) {
                return "It was true";
            }
            return "It was false";
            }

            test(true);
            test(false);

                test(true) returns the string It was true, 
                and test(false) returns the string It was false.

                When test is called with a value of true, 
                the if statement evaluates myCondition to see if it is true or not. 
                Since it is true, the function returns It was true. 
                When we call test with a value of false, 
                myCondition is not true and the statement in the curly braces 
                is not executed and the function returns It was false.


Comparison with the Equality Operator
    There are many comparison operators in JavaScript. 
    All of these operators return a boolean true or false value.

    The most basic operator is the equality operator ==

    The equality operator compares two values 
    and returns true if they're equivalent or false if they are not. 
    Note that equality is different from assignment (=), 
    which assigns the value on the right of the operator to a variable on the left.

            function equalityTest(myVal) {
            if (myVal == 10) {
                return "Equal";
            }
            return "Not Equal";
            }    

        If myVal is equal to 10, the equality operator returns true, 
        so the code in the curly braces will execute, and the function will return Equal.
        Otherwise, the function will return Not Equal.

        In order for JavaScript to compare two different data types 
        (for example, numbers and strings), 
        it must convert one type to another. 
        This is known as Type Coercion. 
        Once it does, however, it can compare terms as follows:

            1   ==  1  // true
            1   ==  2  // false
            1   == '1' // true
            "3" ==  3  // true
            "4" ==  3  // false


Comparison with the Strict Equality Operator
    Strict equality (===) is the counterpart to the equality operator (==)

    unlike the equality operator, which attempts to convert both values being compared to a common type, 
    the strict equality operator does not perform a type conversion.

    If the values being compared have different types, 
    they are considered unequal, and the strict equality operator will return false.

        3 ===  3  // true
        3 === '3' // false


Comparison with the Inequality Operator
    The inequality operator (!=) is the opposite of the equality operator. 
    it means DIFFERENT to

    Like the equality operator, 
    the inequality operator will convert data types of values while comparing.


        1 !=  2    // true
        1 != "1"   // false
        1 != '1'   // false
        1 != true  // false
        0 != false // false


Comparison with the Strict Inequality Operator
    The strict inequality operator (!==) is the logical opposite of the strict equality operator. 
    It means "Strictly Not Equal"
    DIFERENTE A estricto
    The strict inequality operator will not convert data types.

            3 !==  3  // false
            3 !== '3' // true
            4 !==  3  // true


Comparison with the Greater Than Operator 
    The greater than operator (>) compares the values of two numbers.
    If the number to the left is greater than the number to the right,
    it returns true. Otherwise, it returns false.

    Like the equality operator, the greater than operator will convert data types of values while comparing.
    
                5   >  3  // true
                7   > '3' // true
                2   >  3  // false
                '1' >  9  // false


Comparison with the Greater Than Or Equal To Operator
    The greater than or equal to operator (>=) compares the values of two numbers.
    If the number to the left is greater than or equal to the number to the right, 
    it returns true. Otherwise, it returns false.

    Like the equality operator, the greater than or equal to operator will convert data types while comparing.

                6   >=  6  // true
                7   >= '3' // true
                2   >=  3  // false
                '7' >=  9  // false            


Comparison with the Less Than Operator
    The less than operator (<) compares the values of two numbers. 
    If the number to the left is less than the number to the right, 
    it returns true. Otherwise, it returns false. 
    
    Like the equality operator, the less than operator converts data types while comparing.

                2   < 5 // true
                '3' < 7 // true
                5   < 5 // false
                3   < 2 // false
                '8' < 4 // false


Comparison with the Less Than Or Equal To Operator
    The less than or equal to operator (<=) compares the values of two numbers. 
    If the number to the left is less than or equal to the number to the right, 
    it returns true. 
    If the number on the left is greater than the number on the right, it returns false. 
    
    Like the equality operator, the less than or equal to operator converts data types.

                4   <= 5 // true
                '7' <= 7 // true
                5   <= 5 // true
                3   <= 2 // false
                '8' <= 4 // false


Comparisons with the Logical AND Operator   (&&)
    Sometimes you will need to test more than one thing at a time.
    The logical and operator (&&) returns true if and only if 
    the operands to the left and right of it are true. (los dos a la vez)

    The same effect could be achieved by nesting an if statement inside another if:

        if (num > 5) {
            if (num < 10) {
                return "Yes";
            }
        }
        return "No";

    will only return Yes if num is greater than 5 and less than 10. 
    The same logic can be written as:

        if (num > 5 && num < 10) {
            return "Yes";
        }
        return "No";


        function testLogicalAnd(val) {
            if (val <= 50 && val >= 25) {
                return "Yes";
            }
            return "No";
        }


Comparisons with the Logical Or Operator    (||) 
    The logical or operator (||) returns true if either of the operands is true. 
    Otherwise, it returns false.

            if (num > 10) {
            return "No";
            }
            if (num < 5) {
            return "No";
            }
            return "Yes";


    will return Yes only if num is between 5 and 10 (5 and 10 included). The same logic can be written as:

            if (num > 10 || num < 5) {
            return "No";
            }
            return "Yes";


            function testLogicalOr(val) {
                if (val >20 || val < 10) {
                    return "Outside";
                }
                return "Inside";
            }


Introducing Else Statements
    When a condition for an if statement is true, the block of code following it is executed. 
    What about when that condition is false? Normally nothing would happen. 
    With an else statement, an alternate block of code can be executed.

            if (num > 10) {
                return "Bigger than 10";
            } else {
                return "10 or Less";
            }


Introducing Else If Statements
    If you have multiple conditions that need to be addressed, 
    you can chain if statements together with else if statements.

            if (num > 15) {
               return "Bigger than 15";
            } else if (num < 5) {
                return "Smaller than 5";
            } else {
                return "Between 5 and 15";
            }


Logical Order in If Else Statements
    Order is important in if, else if statements.

    The function is executed from top to bottom 
    so you will want to be careful of what statement comes first.


    un ejemplo de xq es importante el orden
    we'll see two different fuctions

            function foo(x) {
                if (x < 1) {
                    return "Less than one";
                } else if (x < 2) {
                    return "Less than two";
                } else {
                    return "Greater than or equal to two";
                }
            }

            function bar(x) {
                if (x < 2) {
                    return "Less than two";
                } else if (x < 1) {
                    return "Less than one";
                } else {
                    return "Greater than or equal to two";
                }
            }


    en el caso de la segunda funcion nunca vamos a llegar al primer else if
    porque todos los numeros < a 1 tambien son < a 2 que es el primer if
    siempre se cumple el primero antes que el segundo


Chaining If Else Statements
    if/else statements can be chained together for complex logic. 
    Here is pseudocode of multiple chained if / else if statements:

                if (condition1) {
                    statement1
                } else if (condition2) {
                    statement2
                } else if (condition3) {
                    statement3
                . . .
                } else {
                    statementN
                }


            
            function testSize(num) {
                if (num < 5) {
                    return "Tiny";
                }
                else if (num < 10) {
                    return "Small";
                }
                else if (num < 15) {
                    return "Medium";
                }
                else if (num < 20) {
                    return "Large";
                }
                else if (num >= 20) {
                    return "Huge";
                } 
                else {
                return "Change Me";
                }
            }


Exerciste Example  with arrays and else ifs

    en el golf cada hoyo tiene un "par" que es el numero de veces q hay que pegar
    para embocarle. "Stroker" es cada vez que el golfista le pega a la pelota.
    segun la cantidad de strokes hay un X apodo.

            Strokes	        Return
            1	            "Hole-in-one!"
            <= par - 2	    "Eagle"
            par - 1	        "Birdie"
            par	            "Par"
            par + 1	        "Bogey"
            par + 2	        "Double Bogey"
            >= par + 3	    "Go Home!"

        el programa seria

            const names = ["Hole-in-one!", "Eagle", "Birdie", "Par", "Bogey", "Double Bogey", "Go Home!"];
            
            function golfScore(par, strokes) {
                if (strokes == 1) {
                    return names[0];
                }
                else if (strokes <= par - 2) {
                    return names[1];
                }
                else if (strokes == par - 1) {
                    return names[2];
                }
                else if (strokes == par) {
                    return names[3];
                }
                else if (strokes == par + 1) {
                    return names[4];
                }
                else if (strokes == par + 2) {
                    return names[5];
                }
                else if (strokes >= par + 3) {
                    return names[6];
                }
            }


Selecting from Many Options with Switch Statements

    If you have many options to choose from, use a switch statement. 
    A switch statement tests a value and can have many case statements which define various possible values. 
    Statements are executed from the first matched case value until a break is encountered.

    it means that con los switch puedo determinar distintos resultados para diferentes casos
    para una diferente entrada de datos

                switch (lowercaseLetter) {
                    case "a":
                        console.log("A");
                        break;
                    case "b":
                        console.log("B");
                        break;
                }

    case values are tested with strict equality (===).
    The break tells JavaScript to stop executing statements. 
    If the break is omitted, the next statement will be executed.

    EXERCISE
        Write a switch statement which tests val and sets answer for the following conditions:
            1 - alpha
            2 - beta
            3 - gamma
            4 - delta


            function caseInSwitch(val) {
                let answer = "";
                switch (val) {
                    case 1:
                        answer = "alpha";
                        break;
                    case 2:
                        answer = "beta";
                        break;
                    case 3:
                        answer = "gamma";
                        break;
                    case 4:
                        answer = "delta";
                        break;
                    }
                return answer;
            }

                console.log(caseInSwitch(1));
                    "alpha"


Adding a Default Option in Switch Statements
    In a switch statement you may not be able to specify all possible values as case statements. 
    Instead, you can add the default statement which will be executed if no matching case statements are found. 
    Think of it like the final else statement in an if/else chain.
    A default statement should be the last case.
                switch (num) {
                    case value1:
                        statement1;
                        break;
                    case value2:
                        statement2;
                        break;
                    ...
                    default:
                        defaultStatement;
                        break;
                }


            function switchOfStuff(val) {
                let answer = "";
                switch (val) {
                    case "a":
                        answer = "apple";
                        break;
                    case "b":
                        answer = "bird";
                        break;
                    case "c":
                        answer = "cat";
                        break;
                    default:
                        answer = "stuff";
                        break;
                }
                return answer;
            }




