
Cascade Style Sheet
en CSS siempre se toma como verdad el último ingreso de datos, por eso se llama cascada.
Cuando le agregamos estilo a un elemento dentro de nuestro HTML mediante el atributo style, priorizaremos ese estilo frente a cualquiera que le podamos aplicar en el CSS.

El CSS es para agregarle estilo a nuestro HTML.


Los elementos son el contenido dentro de las etiquetas.
-------------------------------------------------------------------------------------------------------------------------------------

Para trabajar con CSS no hace falta hacer ninguna declaración, solo se empieza a escribir la estructura del código y luego este se conecta en el código HTML.
Para conectar el archivo CSS en nuestro HTML, en el archivo HTML vamos a ingresar en la parte de HEAD el siguiente código:
	<link rel="stylesheet" type="text/css" href="archivename.css">


-------------------------------------------------------------------------------------------------------------------------------------


La estructura de la codificación en CSS es la siguiente:

	selector {
		propiedad: valor;
	}

	una propiedad y un valor forman una declaración
	una declaración y un el selector forman una regla

Después de definir una declaración se se cierra con punto y coma;


-------------------------------------------------------------------------------------------------------------------------------------


SELECTORES

El selector es el elemento o conjunto de elementos que queremos modificar. Los tipos de selectores son:

	body: el body se puede modificar y darle estilo, todo el resto de los elementos que existan en el HTML heredarán el estilo que le demos al body.

	universal: se utiliza con "*" y selecciona todos los elementos.

	de tipo: es para elegir un determinado elemento, ejemplo h1. Todos los elementos que haya de ese mismo tipo reaccionarán igual. se manifiesta solo con el titulo del elemento/etiqueta: "text"

	clases: las clases las definimos primero en el HTML y luego las referenciamos con "." ".nameclass". Si queremos un elemento que cuente con más de una clase las definiremos todas juntas: ".class1.class2". EJ buena práctica: ".blue-text" En el HTML las clases cuando es más de una en un mismo elemento irían separados por espacios.

	ID: los elementos identificados por ID en el HTML los podemos referenciar con "#" "#id". El ID es más importante que las clases o sea tiene relevancia y el programa le dará la prioridad ante una contradicción.

	por atributo: los atributos pueden ser existentes del lenguaje HTML o creados en el momento y son referenciados entre "[]" "[atributo]". Puede ser llamado unicamente el atributo o el atributo y su valor.
		tambien puede ser el atributo de un elemento, por ejemplo
			input[name="password"]
		estoy llamando al atributo name de valor password que existe en un elemento input.

	descendiente: se utiliza para poder editar un grupo de elementos que se encuentra dentro de otro elemento. El selector se define ordenado por prioridad de mayor a menor, si por ejemplo tenemos un h1 con un p dentro sería así "h1 p" es decir es para seleccionar un selector que está dentro de otro.
		tambien podemos utilizarlo para seleccionar determinados elementos que tienen x clase podemos hacerlo asi ej: .meme p entonces todos los elementos p que tengan la clase meme van a estar seleccionados

	varios: para seleccionar varios selectores los podemos separar por ", " "selector1, selector2"

	hijos: para seleccionar a todos los selectores hijos de un selector lo haremos con el signo ">" "sel1 > sel2" y así seleccionaremos todos los sel2 que estén dentro de sel1.

	hermanos: para seleccionar selectores hermanos, es decir que tienen el mismo elemento padre. "+" "sel1 + sel2"

	pseudo-clases: se utiliza para darle un efecto a un elemento cuando le ponemos el mouse encima. Se define usando ":" "nombreElemento:hover"

La propiedad es lo que queremos hacer con nuestro elemento, puede ser el color, tamaño, ancho, posicion, sombra, texto, bordes etc.
	

	nota: 
		siempre que seleccionemos un elemento que sea padre de otros y a este le asignemos determinadas propiedades, todos los hijos se van a ver afectados con esta modificacion.
			pero como estamos en CSS (hojas de estilo en cascada) si especificamos por debajo algun elemento por mas que sea hijo del anterior podemos sobreescribir la modificacion y asignarle lo que querramos.

			ejemplo
				body {
					font-family: sans-serif;
				}
				
				h1 {
					font-family:Impact;
				}

			por mas de que h1 sea hijo de body, al estarle asignando otra propiedad por debajo, el navegador leera Impact

-------------------------------------------------------------------------------------------------------------------------------------


PROPIEDADES


Colores:

	color: color del texto || valores: RGB, RSL, HEX, namecolor, RGBA, HSLA
				ejemplo de rgb seria: rgb(0, 0, 0)

					HEX funciona con el codigo RGB pero de la siguiente manera.
					se utiliza con un # al principio y 6 digitos donde los 2 primeros representan Red, los 2 del medio Green y los 2 ultimos Blue. Se utilizan valores de 0-9 y A-F donde 0 es 0% y F 100%.
						con la funcion HEX se le puede agregar un cuarto parametro de dos digitos gracias a la funcion alpha-channel y lo que hacemos con esto es agregarle opacidad al color.
								#RRGGBBOP
									(RR = red, GG = green, BB = blue, OP = opacity)

					HSL es hue, saturation and lightness. (tono, saturacion y luminosidad)
						H es numerico de 0 a 360. es la intensidad de un color desde 0 %, o gris, hasta 100 % para un color puro.
						S es porcentaje de 0% a 100%. es lo brillante que aparece un color, desde el 0 %, o negro completo, hasta el 100 %, blanco completo, siendo el 50 % neutral.
						L es porcentaje de 0% a 100%
							tambien podemos utilizar la funcion HSLA agregandole la funcion alpha-channel para agregarle opacidad.
								hsla(0-360, %, %, 0-1.0)
									hsla(125, 75%, 75%, 0.5)

						

	background-color: color de fondo || valores: =color

	background-image: imagen de fondo || valores:  url(vínculo local o externo) y muchos mas, googlear.
		puede soportar varios parametros donde podemos indicar una combinacion de valores por ejemplo un degrade y una imagen, todo junto.

	backgound-repeat: repetición de la imagen de fondo || valores: repeat, repeat-x, repeat-y, no-repeat

	background-attachment: despalazamiento de la imagen de fondo || valores: scroll, fixed

	background-position: posición de la imagen de fondo || valores: percentage, length, left, center, right, top, bottom

	background-size: tamaño de la imagen de fondo || valores: unidad de medida

	background-clip:
				https://developer.mozilla.org/es/docs/Web/CSS/background-clip

	opacity: transparencia de un elemento || valores: 0 al 1.0 or %


Texto:

	text-indent: desplazamiento de la primera linea del texto || valores: longitud, porcentaje

	text-align: alineamiento del texto || valores: left, right, center, justify

	text-decoration: efectos de subrayado y tachado || valores: none, underline, overline, line-through, *.

	letter-spacing: espacio entre caracteres || val: normal, longitud

	word-spacing: espacio entre palabras || val: normal, longitud

	text-transform: transformacion a mayus/minus || val: capitalize, uppercase, lowercase, none

	line-height: tamaño del espacio entre lineas || longitud, porcentaje

	vertical-align: alineación vertical || val: top, middle, bottom, baseline, sub, super, valor

	text-shadow: La propiedad text-shadow agrega sombra al texto. Acepta una lista de sombras separadas por coma, para aplicarlas al texto y a la propiedad text-decorations del elemento. Tambien se le puede asignar color.
	Los parametros trabajan como offset-x y offset-y, el color puede ser en cualquier codificacion y tambien se le puede agregar blur-radius.


Fuentes:

	font-family: familia de fuentes, tipo de fuente || valores: nombre-familia, nombre-familia-genérica, *. Los nombres de familia de fuentes son sensibles a mayúsculas y minúsculas, y si incluyen espacios deben estar envueltos entre comillas. Por ejemplo, necesitas comillas para usar la fuente "Open Sans", pero no las necesitas para usar la fuente Lobster. se pueden tener fuentes de "fallback" en caso de que la primera falle o whatever, separadas por comas podemos poner todas las que querramos.
	si la fuente tiene espacios, tiene que escribirse entre comillas.

	font-style: estilo de la fuente || val: normal, italic, oblique

	font-variant: convierte a mayúsculas manteniendo un tamaño inferior || normal, small-caps

	font-weight: anchura/grosor de los caracteres, normal=400, negrita=700 || val: normal, bold, bolder, lighter, 100, 200..900

	font-size: tamaño de la fuente || xx-small..xxlarge, larger, smaller, longitud, porcentaje

Para utilizar todo tipo de fuentes hay que ir al fonts de google y copiar el codigo html para referenciar la fuente y luego poder usarla en CSS


Listas:
	
	list-style-type: estilo aplicable a los marcadores visuales de las listas || disc, circle, square, decimal..etc..

	list-style-image: imagen aplicable a los elementos de las listas || url("...") 

	list-style-position: posición dentro de la lista de los elementos marcadores de las listas || inside, outside

	list-style: permite establecer el estilo de la lista, la imagen y/o la posición || list-style-type, list-style-position, list-style-image


Tablas:

	caption-side: posición del titulo respecto a la tabla || top, bottom

	table-layout: formato de las celdas, filas y columnas || auto, fixed

	border-collapse: selección del modelo de los bordes || collapse, separate

	border-spacing: espaciado entre los bordes de celdas adyacentes || longitud

	empty-cells: visibilidad de los bordes de celdas sin contenido || show, hide


Pseudo-clases para selección de hijos o hermanos:

	:first-child || primer hijo
	:last-child || ultimo hijo 
	:first-of-type || primer hermano de su tipo
	:last-of-type || ultimo "                "
	:only-child || hijos unicos
	:only-of-type || unicos hermanos de su tipo
	:empty || elementos que no tienen hijos
	:nth-child(n) || n elementos hijos
	:nth-last-child(n) || "  " contando desde el último
	:nth-of-type(n) || n elemento hijo de su tipo 
	:nth-last-of-type(n) || "  " comenzando desde el ultimo

		EJ: p:last-child
			to select the last child of p element.

Pseudo-clases para los estados de un elemento:

	:link || no visitado por el usuario
	
	:visited || visitado por el usuario

	:hover || modifica el estilo cuando un elemento apuntador pasa por encima

	:active || se activa cuando el usuario pulsa el elemento

	:focus || se activa cuando se tiene el foco sobre el elemento

	:root || util para definir variables y que se puedan utilizar en todo el documento. Le darán un valor global a una variable pero esta podrá ser sobreeditada luego en cada elemento que se quiera

Pseudo-elementos:

	::first-line || primera linea de texto de un elemento

	::first-letter || primera letra de la primera linea de texto de un elemento

	::before || añade contenido al principio del documento

	::after || añade contenido al final del documento

	::placeholder || The ::placeholder selector selects form elements with placeholder text, and let you style the placeholder text.


Prefijo para los navegadores:
	
	-moz- Firefox
	-webkit- Safari y Chrome
	-o- Opera
	-khtml- Konqueror
	-ms- Internet Explorer
	-chrome- Google Chrome


Modelos de cajas: márgenes, rellenos y bordes:

	Un contenedor tiene height y width y hacia afuera en el siguiente orden contiene:
	
			padding
			border
			margin

			estas 3 propiedades son muy importantes y son las encargadas de controlar el espacio que rodea cada elemento.

			padding: controla la cantidad de espacio que hay entre el contenido de un elemento y el border. EJ: En un elemento con texto, el padding será el espacio que habrá entre el texto y el borde.

			margin: controla la cantidad de espacio que hay entre el border y los elementos que lo rodean. a mayor margen más pequeño parecerá. Si el valor de margin es negativo, aumentará su tamaño.


	height; : alto

	width; : ancho

	max-width; max-height; / min-width; min-height; estas propiedades son utiles cuando definimos un width o un height en porcentaje y queremos generar adaptaciones para distintas pantallas le podemos asignar un max width en pixeles para que en pantallas muy grandes se adapten al contenido, lo mismo a la inversa con el min.

	paddint-top; padding-right; padding-bottom; padding-left; : tamaño del relleno superior, derecho, inferior e izquierdo || longitud, porcentaje
	
		padding: tamaño del relleno de los 4 lados || longitud, porcentaje {1,4}
			El padding puede ser modificado en sus 4 lados solamente con la propiedad de 'padding' siguiendo las agujas del reloj definiéndolas todas juntas separadas por espacio.
				EJ: selector {
					padding: 5px 5px 5px 5px; top right bottom left
					}
				tambien se puede modificar en dos parametros donde el primero es top y bot y el segundo es r y l

				si fuera el mismo valor para todos lados puede declararse una sola vez
					padding: 5px;

	margin-top; marginm-right; margin-bottom; margin-left; : tamaño del margen superior, derechjo, inferior e izquierdo || longitud, porcentaje, auto 

	margin: ancho de los margenes || longitud, porcentaje, auto {1,4}
		si aplicamos un valor de 0 auto en margin vamos a centrar un elemento.

		margin: <top&bottom> <left&right>  // margin: 20px 20px

	El margin puede ser modificado en sus 4 lados solamente con la propiedad de 'margin' siguiendo las agujas del reloj definiéndolas todas juntas separadas por espacio.
	EJ: selector {
			margin: 5px 5px 5px 5px; top right bottom left
		}
		tambien se puede utilizar solo con 2 parametros 
		donde el primero sera top y bottom y el segundo sera right y left

	border-top-width; border-right-width; border-bottom-width; border-left-width; : anchura del borde superior, derecho, inferor o izquierdo || thin, medium, thick, longitud

	border-with: anchura del borde (reducida) || thin, medium, thick, longitud {1,4}

	border-color: color del borde (reducida) || color, transparent

	border-top-style; border-right-style; border-bottom-style; border-left-style; : 
		estilo del borde superior, derecho, inferior e izquierdo || 
			none, hidden, dotted, dashed, solid, double, groove, ridge, inset, outset

	border-style: estilo del borde (reducida) || =anterior + {1,4}

	border-top; border-right; border-bottom; border-left; : ancho, estilo y color para los bordes || border-top-width, border-top-style, border-top-color
		dentro del border podemos agregarle el width el style y el color separandolos por espacio. 
			ej: border-left: width style color;
			border-left: 10px solid black;

	border: ancho, estilo y color para todos los bordes (reducida) || =anterior
		border: 50px solid black;

	border-radius: curvatura del borde || longitud, porcentaje {1,4}
		border-radius: 5px;


content: propiedad compleja para anhadir contenido.
		http://dis.um.es/~lopezquesada/documentos/IES_1213/LMSGI/curso/UT5/libroswebcss21/www.librosweb.es/referencia/css/content.html#:~:text=La%20propiedad%20content%20es%20una,insertarlo%20en%20la%20p%C3%A1gina%20HTML%20.
		https://developer.mozilla.org/en-US/docs/Web/CSS/content

		suele usarse con el ::after o el ::before para anhadir contenido
	

align-items: 
		La propiedad CSS align-items establece el valor align-self sobre todos los descendientes directos de un grupo. La propiedad align-self indica la alineación de un elemento dentro del bloque que lo contiene.

Comportamiento de los contenedores:

	display: comportamiento del contenedor || inline, block, inline-block, none y mas..
		block significa que el elemento ocupara toda la linea hasta el final

		inline se creara un bloque con el tamanho que ocupe el elemento.

		none significa que va a desaparecer

		inline-block es una combinacion de ambos valores. una caja de este tipo se comporta como si fuera de bloque pero respecto a los elementos que la rodean es una caja inline.

		flex este valor significa flexbox y eso hay q estudiarlo
			si le damos display valor flex a un elemento, los hijos directos de este contenedor se vuelven ítems flex. Como con todas las propiedades de CSS, se definen algunos valores iniciales, así que cuando creemos un contenedor flex todos los ítems flex contenidos se comportarán de la siguiente manera.

	position: esquema de posicionamiento || static, relative, absolute, fixed
		https://www.w3schools.com/css/css_positioning.asp

	top; right; botom; left; : desplazamiento de la caja respecto al borde superior, derecho, inferior, izquierdo || longitud, porcentaje, alto 

	float: posicionamiento flotante || left, right, none 

	clear: control de cajas adyacentes a las float || none, left, right, both

	z-index: nivel de la capa || auto, número entero 
		https://developer.mozilla.org/es/docs/Web/CSS/z-index
		La propiedad CSS z-index indica el orden de un elemento posicionado y sus descendientes. Cuando varios elementos se superponen, los elementos con mayor valor z-index cubren aquellos con menor valor.

	box-sizing: control de bordes y relleno en el comportamiento del contenedor || content-box, border-box
		content-box es el comportamiento CSS por defecto para el tamaño de la caja (box-sizing). 
			Si se define el ancho de un elemento en 100 pixeles, 
			la caja del contenido del elemento tendrá 100 pixeles de ancho, 
			y el ancho de cualquier borde o relleno ser añadirá al ancho final desplegado.
		border-box le dice al navegador tomar en cuenta para cualquier valor 
			que se especifique de borde o de relleno para el ancho o alto de un elemento. 
			Es decir, si se define un elemento con un ancho de 100 pixeles. 
			Esos 100 pixeles incluíran cualquier borde o relleno que se añadan, 
			y la caja de contenido se encogerá para absorber ese ancho extra. 
			Esto típicamente hace mucho más fácil dimensionar elementos.

	visibility: muestra u oculta un elemento ocupando el espacio || visible, hidden

	box-shadow: aplica una o mas sombras alrededor de un elemento.
		box-shadow: offsetX offsetY color;
			box-shadow: 5px 5px red;
		ademas el box shadow tiene un valor opcional llamado blurRadius que va como tercer parametro despues de los valores X e Y.
			este blurRadius tiene la funcion de agregarle un borde difuminado al box shadow.
			box-shadow: offsetX offsetY blurRadius color;
				box-shadow: 5px 5px 5px green;
		hay otro valor opcional llamado spreadRadius que cumple la funcion de agrandar/expandir el box-shadow.
			se utiliza como cuarto parametro
				box-shadow: offsetX offsetY blurRadius spreadRadius color;
					box-shadow: 0px 0px 0px 5px green;


-------------------------------------------------------------------------------------------------------------------------------------

ESPECIFICIDAD

Para explicar este concepto es importante recordar que CSS es hoja de estilo en cascada, en cascada significa que va de arriba hacia abajo y que lo último siempre es lo más importante. Si definimos en tres veces diferentes determinadas propiedades para un mismo elemento, el último será el más importante.
A partir de acá entra el concepto de la especificidad como un sinónimo de jerarquía donde determinados tipos de elemento tienen mayor poder que otros. El rango de jerarquía es el siguiente:

	1: !important; 
	2:  estilos en linea; 
	3: identificadores; 
	4: clases, pseudoclases, atributos; 
	5: elementos, pseudoelementos;

Cuando la jerarquía del tipo de elementos son el mismo, funciona la cascada pero cuando son diferentes gana el que tenga mayor jerarquía.

1: !important, este se declara seguido del valor que le asignamos a una propiedad en el CSS.
2: estilos en linea, estos son los códigos dentro del atributo style redactados en nuestro HTML.


-------------------------------------------------------------------------------------------------------------------------------------


Metedología BEM

La metodología BEM está hecha para evitar conflictos a la hora de editar determinadas clases de distintos bloques de elementos evitando justamente seleccionar muchas clases cuando solo queremos editar una sola. Darnos cuenta que elemento estamos seleccionando gracias al nombre de su clase. Esta metodología es ideal para modificar todos nuestros elementos según clase.
Cuando nosotros tenemos varios elementos dentro de otros, ejemplo utilizando BEM:

	<div class="contact-form">
		<input type="text" class="contact-form__input">
		<input type="text" class="contact-form__input">
		<input type="text" class="contact-form__input--dif">
	</div>
	
Acá lo que está pasando es que tenemos un div y varios input y cada uno de estos elementos debe tener su propia clase y las clases de los elementos hijos deben esta relacionadas con las clases de los elementos padres para que luego no tengamos problemas de edición si tenemos otros bloques de elementos parecidos. Entonces lo que hicimos en este ejemplo fue crear un formulario de contacto creando esta clase con nombre descriptivo y además donde cada input tiene su propia clase con nombre descriptivo a la clase a la que pertenece en primer lugar osea al formulario de contacto y a su función/elementName separado por "__". Si quisieramos hacer que uno de estos input o más de uno se diferenciara de los otros a la hora de hacer la edición, le agregaremos después de "--" en el nombre de su clase, la palabra distintiva y descriptiva.
En resumen se separa el nombre de la clase padre con "__" del nombre del elemento y se utiliza "--" para agregarle un distintivo.

Y en el caso de que tuvieramos tres elementos o más, cada uno dentro de otro, ejemplo utilizando BEM:
	<div class="contact-form">
		<p class="contact-form__p">
			<h2 class="contact-form__p-h2"> TEXT </h2>
		</p>
	</div>

En este caso como podemos ver lo que se hace es que el nombre de la clase del elemento nieto llevará en primer lugar el nombre de la clase del elemento abuelo, seguido del nombre del elemento padre con la separación "__" que corresponde y por último su propio nombre separado por un "-".


-------------------------------------------------------------------------------------------------------------------------------------


UNIDADES DE MEDIDA

Para el tamaño de cualquier tipo de propiedad se utilizan varios tipos de unidades de medida.
Hay dos tipos de medida, las fijas y las relativas.

Las unidades de medidas fijas son:
	in: pulgadas, 1 pulgada = 2.54cm
	cm: centimetros
	mm: milimetros
	pt: puntos, 1pt = 1/72 pulgadas
	pc: picas, 1 pica = 12 puntos

Las unidades de medidas relativas son:

	px: pixeles, relativo al dispositivo
	rem: están basadas en el tamaño de la fuente del elemento html.
		1 rem es igual al valor de fontsize del elemento raiz que es el elemento html. si la fuente del elemento raiz vale 15px, 2rem seran 30px.
	em: relativo al tamaño de la fuente del elemento o su respectiva caja/elemento padre, 2em significaría 2 veces el tamaño de la fuente actual. Si no tenemos definido el tamaño de la fuente en su respectivo elemento padre, será el por defecto del navegador, generalmente 16px.
	%: porcentaje, será relativo al elemento padre/la caja que la contiene.
	vh y vw: son medidas de acuerdo al total del height y width de toda la pantalla, determinados por el porcentaje 1-100. 50vh será la mitad del alto y 50vw será la mitad del ancho.
		cuando a un elemento en css le damos un valor de max-width y otro de min-width y a su vez le asignamos un width en valor de vw lo que le estamos diciendo al elemento es que dentro de ese margen que le dimos de max y min width, adapte su width al porcentaje de valor que le asignamos. si la pantalla no cumple con el max y min no va a cumplirse el width en valor de vw.

	Las unidades de medida relativas sirven para generar un risponsive-design lo que significa que los tamaños se adaptan a las pantallas.

	-------------------------------------------------------------------------------------------------------------------------------------

	VARIABLES CSS

	Podemos utilizar las variables cuando queremos darle el mismo color por ejemplo a un grupo de elementos y entonces podremos modificarlos todos solamente cambiando la variable y no yendo 1x1, es útil para agrupar.

	Se definen en el documento CSS mediante -- EJ:
		--penguin-skin: gray;

	Y luego para utilizarlo en un elemento al darle estilo podría ser like:
		background: var(--penguin-skin);

	Cuando queremos agrupar varios elementos podemos crear una variable y darle un nombre y por ejemplo un color entonces todos esos elementos tendrán de color la variable y funcionarán en conjunto compartiendo el mismo valor.

	FALLBACK en variables: se utiliza para dar un valor de respaldo a una determinada propiedad en caso de que el navegador no pueda encontrar nuestra variable y se expresa separado por una coma, EJ:
	background: var(--penguin-skin, gray);

	Note that this can be useful for debugging.


	
	Las variables CSS pueden simplificar la forma en que utilizas "media queries" (consultas sobre el tipo de dispositivo donde se muestra el documento HTML).

	Por ejemplo, cuando la pantalla es más pequeña o más grande que el breakpoint de tu media query, puedes cambiar el valor de una variable, y su estilo se aplicará dondequiera que la utilices.



	--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

FUNCIONES CSS
	las funciones se utilizan con determinados parametros que no estan en estos apuntes pero facilmente se puede buscar


	Transform functions
	These functions are used when the <transform-function> CSS data type is used as a value of transform.

	matrix()
	Describes a homogeneous 2D transformation matrix.

	matrix3d()
	Describes a 3D transformation as a 4×4 homogeneous matrix.

	perspective()
	Sets the distance between the user and the z=0 plane.

	rotate()
	Rotates an element around a fixed point on the 2D plane.

	rotate3d()
	Rotates an element around a fixed axis in 3D space.

	rotatex()
	Rotates an element around the horizontal axis.

	rotatey()
	Rotates an element around the vertical axis.

	rotatez()
	Rotates an element around the z-axis.

	scale()
	Scales an element up or down on the 2D plane.

	scale3d()
	Scales an element up or down in 3D space.

	scalex()
	Scales an element up or down horizontally.

	scaley()
	Scales an element up or down vertically.

	scalez()
	Scales an element up or down along the z-axis.

	skew()
	Skews an element on the 2D plane.

	skewx()
	Skews an element in the horizontal direction.

	skewy()
	Skews an element in the vertical direction.

	translate()
	Translates an element on the 2D plane.

	translate3d()
	Translates an element in 3D space.

	translatex()
	Translates an element horizontally.

	translatey()
	Translates an element vertically.

	translatez()
	Translates an element along the z-axis.

	Math functions
	The math functions allow CSS numeric values to be written as mathematical expressions.

	calc()
	A math function that allows basic arithmetic to be performed on numerical CSS values.

	clamp()
	A comparison function that takes a minimum, central, and maximum value and represents its central calculation.

	max()
	A comparison function that represents the largest of a list of values.

	min()
	A comparison function that represents the smallest of a list of values.

	abs() Experimental
	Takes a calculation and returns the absolute value.

	acos() Experimental
	An inverse trigonometric function the angle returned must be normalized to the range [0deg, 180deg].

	asin() Experimental
	An inverse trigonometric function the angle returned must be normalized to the range [-90deg, 90deg].

	atan() Experimental
	An inverse trigonometric function the angle returned must be normalized to the range [-90deg, 90deg].

	atan2() Experimental
	Contains two comma-separated calculations, A and B. A and B can resolve to any <number>, <dimension>, or <percentage>, but must have the same type, or else the function is invalid.

	cos() Experimental
	Contains a single calculation which must resolve to either a <number> or an <angle>.

	exp() Experimental
	Contains one calculation which must resolve to a <number>, and returns the same value as pow(e, A) as a <number>.

	hypot() Experimental
	Contains one or more comma-separated calculations, and returns the length of an N-dimensional vector with components equal to each of the calculations.

	log() Experimental
	Contains one or two calculations (representing the value to be logarithmed, and the base of the logarithm, defaulting to e), which must both resolve as a <number>, and returns the logarithm base B of the value A, as a <number>.

	mod() Experimental
	A modulus function that contains two calculations A and B, and returns the difference between A and the nearest integer multiple of B either above or below A.

	pow() Experimental
	Contains two comma-separated calculations A and B, both of which must resolve as a <number>, and returns the result of raising A to the power of B, returning the value as a <number>.

	rem() Experimental
	A modulus function that contains two calculations A and B, and returns the difference between A and the nearest integer multiple of B either above or below A.

	round() Experimental
	Contains an optional rounding strategy, and two calculations A and B, and returns the value of A, rounded according to the rounding strategy, to the nearest integer multiple of B either above or below A.

	sign() Experimental
	Takes a calculation and returns -1 if the numeric value is negative, +1 if the numeric value is positive, 0⁺ if the numeric value is 0⁺, and 0⁻ if the numeric value is 0⁻.

	sin() Experimental
	Contains a single calculation which must resolve to either a <number> or an <angle>.

	sqrt() Experimental
	Contains a single calculation which must resolve to a <number>, and returns the square root of the value as a <number>.

	tan() Experimental
	Contains a single calculation which must resolve to either a <number> or an <angle>.

	Filter functions
	The <filter-function> CSS data type represents a 
	graphical effect that can change the appearance of an input image. 
	It is used in the filter and backdrop-filter properties.

	blur()
	Blurs the image.

	brightness()
	Makes the image brighter or darker.

	contrast()
	Increases or decreases the image's contrast.

	drop-shadow()
	Applies a drop shadow behind the image.

	grayscale()
	Converts the image to grayscale.

	hue-rotate()
	Changes the overall hue of the image.

	invert()
	Inverts the colors of the image.

	opacity()
	Makes the image transparent.

	saturate()
	Super-saturates or desaturates the input image.

	sepia()
	Converts the image to sepia.

	Color functions
	Functions which specify different color representations. These may be used anywhere a <color> is valid.

	color() Experimental
	Allows a color to be specified in a particular, specified colorspace (rather than the implicit sRGB colorspace that most of the other color functions operate in).

	color-mix() Experimental
	Takes two color values and returns the result of mixing them in a given colorspace by a given amount.

	color-contrast() Experimental
	Takes a color value and compares it to a list of other color values, selecting the one with the highest contrast from the list.

	device-cmyk() Experimental
	Used to express CMYK colors in a device-independent way.

	hsl()
	The HSL color model defines a given color according to its hue, saturation, and lightness components. An optional alpha component represents the color's transparency.

	hsla()
	The HSL color model defines a given color according to its hue, saturation, and lightness components. The alpha component represents the color's transparency.

	hwb() Experimental
	HWB (short for Hue-Whiteness-Blackness) is another method of specifying colors, similar to HSL.

	lab() Experimental
	Lab color is device-independent and specifies physical measurements of color.

	lch() Experimental
	LCH color is device-independent and specifies color using polar coordinates for chroma and hue.

	oklab() Experimental
	OKLab color is device-independent and specifies physical measurements of color.

	oklch() Experimental
	OKLCH color is device-independent and specifies color using polar coordinates for chroma and hue.

	rgb()
	The RGB color model defines a given color according to its red, green, and blue components. An optional alpha component represents the color's transparency.

	rgba()
	The RGB color model defines a given color according to its red, green, and blue components. The alpha component represents the color's transparency.
		la a hace referencia a la funcion alpha channel para agregarle la propiedad opacity dentro de los valores de un color

	Image functions
	These functions may be used wherever an <image> is valid as the value for a property.

	conic-gradient()
	Conic gradients transition colors progressively around a circle.

	image() Experimental
	Defines an <image> in a similar fashion to the url() function, but with added functionality including specifying the image's directionality and fallback images for when the preferred image is not supported.

	image-set() Experimental
	A method of letting the browser pick the most appropriate CSS image from a given set, primarily for high pixel density screens.

	linear-gradient()
	Linear gradients transition colors progressively along an imaginary line.
		funcionan bien en la propiedad background
		lleva un primer parametro que significa la direccion hacia donde va a hacer el gradient y eso puede ser en diferentes medidas pero generalmente se usa grados y se describe como xdeg ej: 90deg. El segundo y tercer parametro son colores y es obligatorio minimo 2, y no tiene tope. A los colores se le puede dar un lenght en PX o % que va a representar la ubicacion que va a ocupar.

	radial-gradient()
	Radial gradients transition colors progressively from a center point (origin).

	repeating-linear-gradient()
	Is similar to linear-gradient() and takes the same arguments, but it repeats the color stops infinitely in all directions so as to cover its entire container.

	repeating-radial-gradient()
	Is similar to radial-gradient() and takes the same arguments, but it repeats the color stops infinitely in all directions so as to cover its entire container.

	repeating-conic-gradient()
	Is similar to conic-gradient() and takes the same arguments, but it repeats the color stops infinitely in all directions so as to cover its entire container.

	cross-fade()
	Can be used to blend two or more images at a defined transparency.

	element()
	Defines an <image> value generated from an arbitrary HTML element.

	paint()
	Defines an <image> value generated with a PaintWorklet.

	Counter functions
	The counter functions are generally used with the content property, although in theory may be used wherever a <string> is supported.

	counter()
	Returns a string representing the current value of the named counter, if there is one.

	counters()
	Enables nested counters, returning a concatenated string representing the current values of the named counters, if there are any.

	symbols()
	Lets you define counter styles inline, directly as the value of a property.

	Font functions
	The font-variant-alternates property controls the use of alternate glyphs, the following functions are values for this property.

	stylistic()
	This function enables stylistic alternates for individual characters. The parameter is a font-specific name mapped to a number. It corresponds to the OpenType value salt, like salt 2.

	styleset()
	This function enables stylistic alternatives for sets of characters. The parameter is a font-specific name mapped to a number. It corresponds to the OpenType value ssXY, like ss02.

	character-variant()
	This function enables specific stylistic alternatives for characters. It is similar to styleset(), but doesn't create coherent glyphs for a set of characters; individual characters will have independent and not necessarily coherent styles. The parameter is a font-specific name mapped to a number. It corresponds to the OpenType value cvXY, like cv02.

	swash()
	This function enables swash glyphs. The parameter is a font-specific name mapped to a number. It corresponds to the OpenType values swsh and cswh, like swsh 2 and cswh 2.

	ornaments()
	This function enables ornaments, like fleurons and other dingbat glyphs. The parameter is a font-specific name mapped to a number. It corresponds to the OpenType value ornm, like ornm 2.

	annotation()
	This function enables annotations, like circled digits or inverted characters. The parameter is a font-specific name mapped to a number. It corresponds to the OpenType value nalt, like nalt 2.

	Shape functions
	The following functions may be used as values for the <basic-shape> data type, which is used in the clip-path, offset-path, and shape-outside properties.

	circle()
	Defines a circle.

	ellipse()
	Defines an ellipse.

	inset()
	Defines an inset rectangle.

	polygon()
	Defines a polygon.

	path()
	Accepts an SVG path string to enable a shape to be drawn.

	Reference functions
	The following functions are used as a value of properties to reference a value defined elsewhere.

	attr()
	Used to retrieve the value of an attribute of the selected element and use it in the stylesheet.

	env()
	Used to insert the value of a user agent-defined environment variable.

	url()
	Used to include a file.

	var()
	Used to insert a value of a custom property instead of any part of a value of another property.

	CSS grid functions
	The following functions are used to define a CSS grid.

	fit-content()
	Clamps a given size to an available size according to the formula min(maximum size, max(minimum size, argument)).

	minmax()
	Defines a size range greater than or equal to min and less than or equal to max.

	repeat()
	Represents a repeated fragment of the track list, allowing a large number of columns or rows that exhibit a recurring pattern.



	REGLA

	@import url();
	@import "string";
		https://www.w3schools.com/cssref/pr_import_rule.asp
		es para importar css


	@media 
		Las media queries (en español "consultas de medios") son útiles cuando deseas modificar tu página web o aplicación en función del tipo de dispositivo (como una impresora o una pantalla) o de características y parámetros específicos (como la resolución de la pantalla o el ancho del viewport del navegador)

		tiene un monton de usos y para eso se puede googlear, pero el mas comun es para usarlo like a condicional en la que le decimos para x pantalla comportate de esta manera y para x pantalal de esta otro. ej:
			@media (min-width: 700px) { 
				...
			 }


	--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

	VARIABLES CSS

	En CSS, las propiedades personalizadas (también conocidas como variables) son entidades definidas por autores de CSS que contienen valores específicos que se pueden volver a utilizar en un documento. Se establecen mediante la notación de propiedades personalizadas (por ejemplo, --main-color: black;) y se acceden mediante la función var() (por ejemplo, color: var (--main-color);)